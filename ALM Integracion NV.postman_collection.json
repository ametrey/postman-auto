{
	"info": {
		"_postman_id": "9682c180-bb16-4683-b830-5bb24b9f76b5",
		"name": "ALM Integracion NV",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26288823"
	},
	"item": [
		{
			"name": "ALM",
			"item": [
				{
					"name": "Autentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "SOAPAction",
								"type": "text",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<alm-authentication>\r\n <user>{{ALMUser}}</user> \r\n <password>{{ALMPass}}</password> \r\n</alm-authentication>"
						},
						"url": {
							"raw": "{{NewALMUrl}}/authentication-point/alm-authenticate",
							"host": [
								"{{NewALMUrl}}"
							],
							"path": [
								"authentication-point",
								"alm-authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "LWSSO_COOKIE_KEY=IdnyDyoVl-nFKuKNkZZZoR8egLV9rB9zduKxBBMiZduZAazVZBMzbX1MVYWLqN5iPJjWoMj2qKgS7rA0F_ULguUqXbxmWkvYYTUDBq-RXFeUJfqwEMrSCo1lPU2YvGq5Ds1XdEtNMBMl6r1NNjCXv7yN63UPfe9RbGZx4RpaFRlEvH9UFC72r0cVs64_eS35iVVDw60f0W0pmFwvVNYncYp5EtgznL06GrG1WgAjpqktHl2WTTyxwvFh5MEvZYaRvVqqb1_RPLOPNcyEV21ixRNEk4GFoq3LCN4MDpMSq96ns7Wh1idWzBkyd5szatGA14atUEJvA3h6oO0gPgfrRQ..;Path=/;HTTPOnly",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{NewALMUrl}}/rest/site-session",
							"host": [
								"{{NewALMUrl}}"
							],
							"path": [
								"rest",
								"site-session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test ID list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonBody = pm.environment.get('responseJson');\r",
									"//console.log(jsonBody);\r",
									"\r",
									"var pathEntities = jsonBody.Entities;\r",
									"//console.log(pathEntities);\r",
									"//console.log(Object.keys(pathEntities));\r",
									"\r",
									"var entity = pathEntities.Entity;\r",
									"//console.log(entity);\r",
									"//console.log(Object.keys(entity));\r",
									"\r",
									"var entities = new Array(25);\r",
									"\r",
									"var pathFields;\r",
									"\r",
									"var testId;\r",
									"var cycleId;\r",
									"var testConfigId;\r",
									"var testCycleId;\r",
									"var runName;\r",
									"var testCode;\r",
									"var subType;\r",
									"\r",
									"let ambiente = '';\r",
									"if (typeof data.TestCode === 'undefined') {\r",
									"    testCode = pm.environment.get(\"TestCode\");\r",
									"} else {\r",
									"    testCode = data.TestCode;\r",
									"}\r",
									"\r",
									"Object.keys(entity).forEach(element => {\r",
									"    //console.log(\"Element: \" + element);\r",
									"    //console.log(entity[element].Fields[0]);\r",
									"    pathFields = entity[element].Fields[0];\r",
									"    testId = pathFields.Field[0].Value[0];\r",
									"    testName = pathFields.Field[27].Value[0];\r",
									"    //console.log(\"--------\");\r",
									"    //console.log(\"Este es el testcode\" + testCode);\r",
									"    //console.log(\"--------\");\r",
									"    if (testName.includes(testCode)) {\r",
									"        console.log(\"Test Id: \" + testId);\r",
									"        runName = pathFields.Field[9].Value[0];\r",
									"        console.log(\"testConfigId: \" + runName);\r",
									"        subType = pathFields.Field[10].Value[0];\r",
									"        console.log(\"subType: \" + subType);\r",
									"        cycleId = pathFields.Field[11].Value[0];\r",
									"        console.log(\"Cycle Id: \" + cycleId);\r",
									"        testCycleId = pathFields.Field[13].Value[0];\r",
									"        console.log(\"testCycleId: \" + testCycleId);\r",
									"        testConfigId = pathFields.Field[16].Value[0];\r",
									"        console.log(\"testConfigId: \" + testConfigId);\r",
									"        testName = pathFields.Field[27].Value[0];\r",
									"        console.log(\"testName: \" + testName);\r",
									"\r",
									"        subType = subType.substring(20, subType.length);\r",
									"\r",
									"        pm.environment.set(\"Test-Id\", testId);\r",
									"        pm.environment.set(\"TestName\", testName);\r",
									"        pm.environment.set(\"Cycle-Id\", cycleId);\r",
									"        pm.environment.set(\"TestCycleId\", testCycleId);\r",
									"        pm.environment.set(\"TestConfigId\", testConfigId);\r",
									"        pm.environment.set(\"RunName\", \"Run_\" + runName.replace(\" \", \"_\"));\r",
									"        pm.environment.set(\"TipoEjecucion\", subType);\r",
									"\r",
									"    }\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var fecha = new Date();\r",
									"\r",
									"pm.environment.set(\"FechaPrueba\",fecha.getFullYear()+\"-\"+(fecha.getMonth()+1)+\"-\"+fecha.getDate());\r",
									"\r",
									"console.log((\"FechaPrueba: \"+fecha.getFullYear()+\"-\"+(fecha.getMonth()+1)+\"-\"+fecha.getDate()));\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "LWSSO_COOKIE_KEY=IdnyDyoVl-nFKuKNkZZZoR8egLV9rB9zduKxBBMiZduZAazVZBMzbX1MVYWLqN5iPJjWoMj2qKgS7rA0F_ULguUqXbxmWkvYYTUDBq-RXFeUJfqwEMrSCo1lPU2YvGq5Ds1XdEtNMBMl6r1NNjCXv7yN63UPfe9RbGZx4RpaFRlEvH9UFC72r0cVs64_eS35iVVDw60f0W0pmFwvVNYncYp5EtgznL06GrG1WgAjpqktHl2WTTyxwvFh5MEvZYaRvVqqb1_RPLOPNcyEV21ixRNEk4GFoq3LCN4MDpMSq96ns7Wh1idWzBkyd5szatGA14atUEJvA3h6oO0gPgfrRQ..;Path=/;HTTPOnly"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{NewALMUrl}}/rest/domains/DEFAULT/projects/{{Proyecto}}/test-instances?query={contains-test-set.id[\"{{TestSet}}\"]}",
							"host": [
								"{{NewALMUrl}}"
							],
							"path": [
								"rest",
								"domains",
								"DEFAULT",
								"projects",
								"{{Proyecto}}",
								"test-instances"
							],
							"query": [
								{
									"key": "query",
									"value": "{contains-test-set.id[\"{{TestSet}}\"]}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Test Run",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonBody = pm.environment.get('responseJson');\r",
									"//console.log(jsonBody);\r",
									"\r",
									"var entity = jsonBody.Entity;\r",
									"//console.log(entity);\r",
									"\r",
									"var pathFields;\r",
									"\r",
									"var RunId;\r",
									"\r",
									"RunId = entity.Fields[0].Field[8].Value[0];\r",
									"//console.log(\"RunId: \" + RunId);\r",
									"pm.environment.set(\"RunId\", RunId);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "LWSSO_COOKIE_KEY=IdnyDyoVl-nFKuKNkZZZoR8egLV9rB9zduKxBBMiZduZAazVZBMzbX1MVYWLqN5iPJjWoMj2qKgS7rA0F_ULguUqXbxmWkvYYTUDBq-RXFeUJfqwEMrSCo1lPU2YvGq5Ds1XdEtNMBMl6r1NNjCXv7yN63UPfe9RbGZx4RpaFRlEvH9UFC72r0cVs64_eS35iVVDw60f0W0pmFwvVNYncYp5EtgznL06GrG1WgAjpqktHl2WTTyxwvFh5MEvZYaRvVqqb1_RPLOPNcyEV21ixRNEk4GFoq3LCN4MDpMSq96ns7Wh1idWzBkyd5szatGA14atUEJvA3h6oO0gPgfrRQ..;Path=/;HTTPOnly"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<Entity Type='run'>\n    <Fields>\n        <Field Name='name'>\n            <Value>Run_11-28_16-11-50</Value>\n        </Field>\n        <Field Name='test-instance'>\n            <Value>1</Value>\n        </Field>\n        <Field Name='testcycl-id'>\n            <Value>{{TestCycleId}}</Value>\n        </Field>\n        <Field Name='cycle-id'>\n            <Value>{{Cycle-Id}}</Value>\n        </Field>\n        <Field Name='test-id'>\n            <Value>{{Test-Id}}</Value>\n        </Field>\n        <Field Name='subtype-id'>\n            <Value>hp.qc.run.MANUAL</Value>\n        </Field>\n        <Field Name=\"duration\">\n            <Value>5</Value>\n        </Field>\n        <Field Name=\"execution-date\">\n            <Value>2020-02-18</Value>\n        </Field>\n        <Field Name=\"execution-time\">\n            <Value>08:01:07</Value>\n        </Field>\n        <Field Name='status'>\n            <Value>Not Completed</Value>\n        </Field>\n        <Field Name='owner'>\n            <Value>{{ALMUser}}</Value>\n        </Field>\n    </Fields>\n</Entity>"
						},
						"url": {
							"raw": "{{NewALMUrl}}/rest/domains/DEFAULT/projects/{{Proyecto}}/runs",
							"host": [
								"{{NewALMUrl}}"
							],
							"path": [
								"rest",
								"domains",
								"DEFAULT",
								"projects",
								"{{Proyecto}}",
								"runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Test Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonBody = pm.environment.get('responseJson');\r",
									"//console.log(jsonBody);\r",
									"\r",
									"var entity = jsonBody.Entities;\r",
									"var nombreVariableAmbiente = \"\";\r",
									"var valorVariableAmbiente = \"\";\r",
									"var valorVariableSinParcear = \"\";\r",
									"var entidad;\r",
									"var entityString = JSON.stringify(entity);\r",
									"var contieneParametros = !entityString.includes(\"TotalResults\\\":\\\"0\");\r",
									"console.log(entityString);\r",
									"console.log(contieneParametros);\r",
									"//console.log(\"Entidades:\");\r",
									"//console.log(entity);\r",
									"\r",
									"try{\r",
									"    if(contieneParametros===true){\r",
									"        Object.keys(entity.Entity).forEach(element => {\r",
									"            entidad = entity.Entity[element];\r",
									"            nombreVariableAmbiente = entidad.Fields[0].Field[3].Value[0];\r",
									"            valorVariableSinParcear = entidad.Fields[0].Field[0].Value[0];\r",
									"            valorVariableAmbiente = valorVariableSinParcear.substring(valorVariableSinParcear.indexOf('font-size:8pt; \">')+17, valorVariableSinParcear.indexOf(\"</span>\"));\r",
									"            console.log(\"sin parcear: \"+valorVariableSinParcear);\r",
									"            //console.log(\"sin parcear: \"+valorVariableSinParcear);\r",
									"            //console.log(\"Nombre de variable: \" + nombreVariableAmbiente);\r",
									"            //console.log(\"Valor de variable: \" + valorVariableAmbiente);\r",
									"            pm.environment.set(nombreVariableAmbiente, valorVariableAmbiente);\r",
									"        });\r",
									"    }\r",
									"}catch (error) {\r",
									"    console.log(error);\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//Object.keys(cuentas.Cuenta).forEach(element => {\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "LWSSO_COOKIE_KEY=IdnyDyoVl-nFKuKNkZZZoR8egLV9rB9zduKxBBMiZduZAazVZBMzbX1MVYWLqN5iPJjWoMj2qKgS7rA0F_ULguUqXbxmWkvYYTUDBq-RXFeUJfqwEMrSCo1lPU2YvGq5Ds1XdEtNMBMl6r1NNjCXv7yN63UPfe9RbGZx4RpaFRlEvH9UFC72r0cVs64_eS35iVVDw60f0W0pmFwvVNYncYp5EtgznL06GrG1WgAjpqktHl2WTTyxwvFh5MEvZYaRvVqqb1_RPLOPNcyEV21ixRNEk4GFoq3LCN4MDpMSq96ns7Wh1idWzBkyd5szatGA14atUEJvA3h6oO0gPgfrRQ..;Path=/;HTTPOnly"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{NewALMUrl}}/rest/domains/DEFAULT/projects/{{Proyecto}}/test-parameters?fields=*&query=%7Bparent-id%5B{{Test-Id}}%5D%7D",
							"host": [
								"{{NewALMUrl}}"
							],
							"path": [
								"rest",
								"domains",
								"DEFAULT",
								"projects",
								"{{Proyecto}}",
								"test-parameters"
							],
							"query": [
								{
									"key": "fields",
									"value": "*"
								},
								{
									"key": "query",
									"value": "%7Bparent-id%5B{{Test-Id}}%5D%7D"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener steps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonBody = pm.environment.get('responseJson');\r",
									"//console.log(jsonBody);\r",
									"\r",
									"var entities = jsonBody.Entities;\r",
									"//console.log(\"------------------------\");\r",
									"//console.log(\"Cantidad de pasos:\");\r",
									"//console.log(entities.$.TotalResults);\r",
									"\r",
									"var cantPasos = entities.$.TotalResults;\r",
									"var idPaso;\r",
									"var nombrePaso;\r",
									"var parentId;\r",
									"\r",
									"\r",
									"var arrayPasos = new Array(40);\r",
									"for (var i = 0; i < 40; i++) {\r",
									"  arrayPasos[i] = new Array(4);\r",
									"}\r",
									"\r",
									"var i = 0;\r",
									"\r",
									"//Creo el array de los pasos y guardo que servicios consume\r",
									"for (i = 0; i < cantPasos; i++) {\r",
									"\r",
									"  //console.log(\"------------------------\");\r",
									"  //console.log(\"Paso: \" + entities.Entity[i].Fields[0].Field[12].Value[0]);\r",
									"  //console.log(\"Nombre: \" + entities.Entity[i].Fields[0].Field[22].Value[0]);\r",
									"  idPaso = entities.Entity[i].Fields[0].Field[12].Value[0];\r",
									"  nombrePaso = entities.Entity[i].Fields[0].Field[22].Value[0];\r",
									"  arrayPasos[i][0] = nombrePaso;\r",
									"  estado = entities.Entity[i].Fields[0].Field[27].Value[0];\r",
									"\r",
									"\r",
									"  arrayPasos[i][0] = nombrePaso;\r",
									"  arrayPasos[i][1] = idPaso;\r",
									"  arrayPasos[i][2] = estado;\r",
									"}\r",
									"\r",
									"//console.log(\"ARRAY: \" + arrayPasos[0]);\r",
									"\r",
									"var j = 0;\r",
									"var k = 0;\r",
									"/*\r",
									"for (j = 0; j < cantPasos; j++) {\r",
									"  for (k = 0; k < 2; k++) {\r",
									"    console.log(\"ARRAY: [\" + j + \"] [\" + k + \"] \" + arrayPasos[j][k]);\r",
									"  }\r",
									"}\r",
									"*/\r",
									"arrayPasos = arrayPasos.slice(0, cantPasos);\r",
									"\r",
									"pm.environment.set(\"PasosTotales\", cantPasos);\r",
									"\r",
									"pm.environment.set(\"Pasos\", arrayPasos);\r",
									"\r",
									"pm.environment.set(\"PasoActualNumero\", 0);\r",
									"///console.log(\"Creo el numero\");\r",
									"\r",
									"let utils = eval(environment.utils)();\r",
									"utils.myPackage.setearPrimerRequest();\r",
									"\r",
									"\r",
									"/*\r",
									"var arrayPasosDos= new Array(40);\r",
									"for (var i = 0; i < cantPasos; i++) {\r",
									"  arrayPasosDos[i] = new Array(2);\r",
									"}\r",
									"\r",
									"arrayPasosDos=pm.environment.get(\"Pasos\");\r",
									"\r",
									"console.log(\"Primera fila: \"+arrayPasosDos[0][1]);\r",
									"*/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{NewALMUrl}}/rest/domains/DEFAULT/projects/{{Proyecto}}/runs/{{RunId}}/run-steps/",
							"host": [
								"{{NewALMUrl}}"
							],
							"path": [
								"rest",
								"domains",
								"DEFAULT",
								"projects",
								"{{Proyecto}}",
								"runs",
								"{{RunId}}",
								"run-steps",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualiza Paso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var arrayPasos = pm.environment.get(\"Pasos\");",
									"",
									"var numeroPasoActual = pm.environment.get(\"PasoActualNumero\");",
									"",
									"var pasoActual = arrayPasos[numeroPasoActual][1];",
									"",
									"pm.environment.set(\"StepId\",pasoActual);",
									"",
									"//console.log(\"LLEGO AL pre request DE ACTUALIZA\");",
									"",
									"",
									"var error = pm.environment.get(\"HuboError\");",
									"var pasosTotales = pm.environment.get(\"PasosTotales\");",
									"var numeroPasoActual=pm.environment.get(\"PasoActualNumero\");",
									"if(error==\"false\"){",
									"    pm.environment.set(\"ALMEstadoPaso\",\"Passed\");",
									"    arrayPasos[numeroPasoActual][2]=\"Passed\";",
									"    pm.environment.set(\"Pasos\",arrayPasos);",
									"}else{",
									"    pm.environment.set(\"ALMEstadoPaso\",\"Failed\");",
									"    arrayPasos[numeroPasoActual][2]=\"Failed\";",
									"    pm.environment.set(\"Pasos\",arrayPasos);",
									"}",
									"",
									"        ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*",
									"let utils = eval(environment.utils)();",
									"utils.myPackage.setearSiguienteRequest(); ",
									"*/",
									"",
									"",
									"var error = pm.environment.get(\"HuboError\");",
									"        var pasosTotales = pm.environment.get(\"PasosTotales\");",
									"        var numeroPasoActual=pm.environment.get(\"PasoActualNumero\");",
									"        if(error==\"false\"){",
									"            //console.log(\"llego\");",
									"            //console.log(\"Paso el get de error\");",
									"            pm.environment.set(\"ALMEstadoPaso\",\"Passed\");",
									"            if(numeroPasoActual<pasosTotales-1){",
									"                var arrayPasos = pm.environment.get(\"Pasos\");",
									"                var nombrePasoSiguiente = arrayPasos[numeroPasoActual+1][0];",
									"                pm.environment.set(\"PasoActualNumero\",numeroPasoActual+1);",
									"                postman.setNextRequest(nombrePasoSiguiente);",
									"            }else{",
									"                //console.log(\"LLEGO AL UPDATE\");",
									"                postman.setNextRequest('Update Test Run');",
									"            }",
									"        }else{",
									"            //console.log(\"Hubo error\");",
									"            pm.environment.set(\"ALMEstadoPaso\",\"Failed\");",
									"            postman.setNextRequest('Update Test Run');",
									"        }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<Entity Type=\"run-step\">\n    <ChildrenCount>\n        <Value>0</Value>\n    </ChildrenCount>\n    <Fields>\n        <Field Name=\"actual\">\n            <Value><![CDATA[{{ALMEvidencia}}]]></Value>\n        </Field>\n        <Field Name=\"status\">\n        \t<Value>{{ALMEstadoPaso}}</Value>\n    \t</Field>\n    </Fields>\n    <RelatedEntities/>\n</Entity>\n"
						},
						"url": {
							"raw": "{{NewALMUrl}}/rest/domains/DEFAULT/projects/{{Proyecto}}/runs/{{RunId}}/run-steps/{{StepId}}",
							"host": [
								"{{NewALMUrl}}"
							],
							"path": [
								"rest",
								"domains",
								"DEFAULT",
								"projects",
								"{{Proyecto}}",
								"runs",
								"{{RunId}}",
								"run-steps",
								"{{StepId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Test Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setNextRequest('Logout');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "LWSSO_COOKIE_KEY=IdnyDyoVl-nFKuKNkZZZoR8egLV9rB9zduKxBBMiZduZAazVZBMzbX1MVYWLqN5iPJjWoMj2qKgS7rA0F_ULguUqXbxmWkvYYTUDBq-RXFeUJfqwEMrSCo1lPU2YvGq5Ds1XdEtNMBMl6r1NNjCXv7yN63UPfe9RbGZx4RpaFRlEvH9UFC72r0cVs64_eS35iVVDw60f0W0pmFwvVNYncYp5EtgznL06GrG1WgAjpqktHl2WTTyxwvFh5MEvZYaRvVqqb1_RPLOPNcyEV21ixRNEk4GFoq3LCN4MDpMSq96ns7Wh1idWzBkyd5szatGA14atUEJvA3h6oO0gPgfrRQ..;Path=/;HTTPOnly"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<Entity Type='run'>\n    <Fields>\n        <Field Name='test-instance'>\n            <Value>1</Value>\n        </Field>\n        <Field Name='ver-stamp'>\n            <Value>1</Value>\n        </Field>\n        <Field Name='test-config-id'>\n            <Value>{{TestConfigId}}</Value>\n        </Field>\n        <Field Name='name'>\n            <Value>{{RunName}}</Value>\n        </Field>\n        <Field Name='has-linkage'>\n            <Value>N</Value>\n        </Field>\n        <Field Name='testcycl-id'>\n            <Value>{{TestCycleId}}</Value>\n        </Field>\n        <Field Name='cycle-id'>\n            <Value>{{Cycle-Id}}</Value>\n        </Field>\n        <Field Name='host'>\n            <Value>{{ALMGalComputer}}</Value>\n        </Field>\n        <Field Name='status'>\n            <Value>{{ALMEstadoPaso}}</Value>\n        </Field>\n        <Field Name='test-id'>\n            <Value>{{Test-Id}}</Value>\n        </Field>\n        <Field Name='subtype-id'>\n            <Value>hp.qc.run.MANUAL</Value>\n        </Field>\n        <Field Name='draft'>\n            <Value>N</Value>\n        </Field>\n        <Field Name='duration'>\n            <Value>5</Value>\n        </Field>\n        <Field Name='owner'>\n            <Value>{{ALMUser}}</Value>\n        </Field>\n    </Fields>\n</Entity>"
						},
						"url": {
							"raw": "{{NewALMUrl}}/rest/domains/DEFAULT/projects/{{Proyecto}}/runs/{{RunId}}",
							"host": [
								"{{NewALMUrl}}"
							],
							"path": [
								"rest",
								"domains",
								"DEFAULT",
								"projects",
								"{{Proyecto}}",
								"runs",
								"{{RunId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setNextRequest(null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "LWSSO_COOKIE_KEY=IdnyDyoVl-nFKuKNkZZZoR8egLV9rB9zduKxBBMiZduZAazVZBMzbX1MVYWLqN5iPJjWoMj2qKgS7rA0F_ULguUqXbxmWkvYYTUDBq-RXFeUJfqwEMrSCo1lPU2YvGq5Ds1XdEtNMBMl6r1NNjCXv7yN63UPfe9RbGZx4RpaFRlEvH9UFC72r0cVs64_eS35iVVDw60f0W0pmFwvVNYncYp5EtgznL06GrG1WgAjpqktHl2WTTyxwvFh5MEvZYaRvVqqb1_RPLOPNcyEV21ixRNEk4GFoq3LCN4MDpMSq96ns7Wh1idWzBkyd5szatGA14atUEJvA3h6oO0gPgfrRQ..;Path=/;HTTPOnly"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{NewALMUrl}}/authentication-point/logout",
							"host": [
								"{{NewALMUrl}}"
							],
							"path": [
								"authentication-point",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consulta de campos obligatorios Copy Copy Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{NewALMUrl}}/rest/domains/DEFAULT/projects/QA_Testing_2019/run-steps?WSDL",
							"host": [
								"{{NewALMUrl}}"
							],
							"path": [
								"rest",
								"domains",
								"DEFAULT",
								"projects",
								"QA_Testing_2019",
								"run-steps"
							],
							"query": [
								{
									"key": "WSDL",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener sesiones",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{NewALMUrl}}/rest/site-session",
							"host": [
								"{{NewALMUrl}}"
							],
							"path": [
								"rest",
								"site-session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resources",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "Obtain Test Parameters Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonBody = pm.environment.get('responseJson');\r",
									"console.log(jsonBody);\r",
									"\r",
									"var entity = jsonBody.Entities.Entity;\r",
									"var nombreVariableAmbiente=\"\";\r",
									"var valorVariableAmbiente=\"\";\r",
									"\r",
									"console.log(entity);\r",
									"\r",
									"\r",
									"Object.keys(entity).forEach(element => {\r",
									"    nombreVariableAmbiente=entity[element].Fields[0].Field[3].value;\r",
									"    console.log(nombreVariableAmbiente);\r",
									"});\r",
									"\r",
									"\r",
									"nombreVariableAmbiente=entity[0].Fields[0].Field[3].Value[0];\r",
									"console.log(nombreVariableAmbiente);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "LWSSO_COOKIE_KEY=IdnyDyoVl-nFKuKNkZZZoR8egLV9rB9zduKxBBMiZduZAazVZBMzbX1MVYWLqN5iPJjWoMj2qKgS7rA0F_ULguUqXbxmWkvYYTUDBq-RXFeUJfqwEMrSCo1lPU2YvGq5Ds1XdEtNMBMl6r1NNjCXv7yN63UPfe9RbGZx4RpaFRlEvH9UFC72r0cVs64_eS35iVVDw60f0W0pmFwvVNYncYp5EtgznL06GrG1WgAjpqktHl2WTTyxwvFh5MEvZYaRvVqqb1_RPLOPNcyEV21ixRNEk4GFoq3LCN4MDpMSq96ns7Wh1idWzBkyd5szatGA14atUEJvA3h6oO0gPgfrRQ..;Path=/;HTTPOnly"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{NewALMUrl}}/rest/domains/DEFAULT/projects/{{Proyecto}}/test-configurations?fields=*&query=%7Bparent-id%5B{{TestConfigId}}%5D%7D",
							"host": [
								"{{NewALMUrl}}"
							],
							"path": [
								"rest",
								"domains",
								"DEFAULT",
								"projects",
								"{{Proyecto}}",
								"test-configurations"
							],
							"query": [
								{
									"key": "fields",
									"value": "*"
								},
								{
									"key": "query",
									"value": "%7Bparent-id%5B{{TestConfigId}}%5D%7D"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain Test Parameters Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonBody = pm.environment.get('responseJson');\r",
									"console.log(jsonBody);\r",
									"\r",
									"var entity = jsonBody.Entities.Entity;\r",
									"var nombreVariableAmbiente=\"\";\r",
									"var valorVariableAmbiente=\"\";\r",
									"\r",
									"console.log(entity);\r",
									"\r",
									"\r",
									"Object.keys(entity).forEach(element => {\r",
									"    nombreVariableAmbiente=entity[element].Fields[0].Field[3].value;\r",
									"    console.log(nombreVariableAmbiente);\r",
									"});\r",
									"\r",
									"\r",
									"nombreVariableAmbiente=entity[0].Fields[0].Field[3].Value[0];\r",
									"console.log(nombreVariableAmbiente);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "LWSSO_COOKIE_KEY=IdnyDyoVl-nFKuKNkZZZoR8egLV9rB9zduKxBBMiZduZAazVZBMzbX1MVYWLqN5iPJjWoMj2qKgS7rA0F_ULguUqXbxmWkvYYTUDBq-RXFeUJfqwEMrSCo1lPU2YvGq5Ds1XdEtNMBMl6r1NNjCXv7yN63UPfe9RbGZx4RpaFRlEvH9UFC72r0cVs64_eS35iVVDw60f0W0pmFwvVNYncYp5EtgznL06GrG1WgAjpqktHl2WTTyxwvFh5MEvZYaRvVqqb1_RPLOPNcyEV21ixRNEk4GFoq3LCN4MDpMSq96ns7Wh1idWzBkyd5szatGA14atUEJvA3h6oO0gPgfrRQ..;Path=/;HTTPOnly"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{NewALMUrl}}/rest/domains/DEFAULT/projects/{{Proyecto}}/customization/entities",
							"host": [
								"{{NewALMUrl}}"
							],
							"path": [
								"rest",
								"domains",
								"DEFAULT",
								"projects",
								"{{Proyecto}}",
								"customization",
								"entities"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var stripNS = require('xml2js').processors.stripPrefix;",
							"var parseString = require('xml2js').parseString;",
							"parseString(responseBody, { tagNameProcessors: [stripNS] }, function (err, jsonbody) {",
							"    pm.environment.set(\"responseJson\", jsonbody);",
							"    //console.log(jsonbody);",
							"});",
							"",
							"",
							"//pm.environment.set(\"responseJson\", responseBody);",
							"",
							"var stripNS = require('xml2js').processors.stripPrefix;",
							"var parseString = require('xml2js').parseString;",
							"parseString(responseBody.data, { tagNameProcessors: [stripNS] }, function (err, jsonbody) {",
							"    pm.environment.set(\"responseXml\", responseBody);",
							"});",
							"",
							"",
							"//pm.environment.set(\"responseXml\", responseBody);",
							"",
							"var resultado = format(responseBody);",
							"pm.environment.set(\"responseXml\", resultado);",
							"",
							"",
							"pm.environment.set(\"requestJson\", request.body);",
							"",
							"//funciones",
							"console.log(\"******************Aca empieza el cambiado******************\");",
							"function format(html) {",
							"    var tab = '\\t';",
							"    var result = '';",
							"    var indent = '';",
							"",
							"    html.split(/>\\s*</).forEach(function (element) {",
							"        if (element.match(/^\\/\\w/)) {",
							"            indent = indent.substring(tab.length);",
							"        }",
							"",
							"        result += indent + '<' + element + '>\\r\\n';",
							"",
							"        if (element.match(/^<?\\w[^>]*[^\\/]$/) && !element.startsWith(\"input\")) {",
							"            indent += tab;",
							"        }",
							"    });",
							"",
							"    return result.substring(1, result.length - 3);",
							"}",
							"//console.log(resultado);",
							"",
							"//console.log(pm.environment.get(\"responseXml\"));",
							"console.log(\"******************Aca termina el cambiado******************\");",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						]
					}
				}
			]
		},
		{
			"name": "NV",
			"item": [
				{
					"name": "Fisica",
					"item": [
						{
							"name": "Cliente By CUIT Fisica",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************   INICIALIZACION  ************************/\r",
											"//Se setean todas la variables necesarias para registrar el llamado al servicio\r",
											"let utils = eval(environment.utils)();\r",
											"var pruebas = \"\";\r",
											"var response = pm.response.json();\r",
											"var requestJson = request.data;\r",
											"var requestHeaders = pm.request.getHeaders(true,true,false,true);\r",
											"var headerString = utils.myPackage.formatHeaders(requestHeaders);\r",
											"var resquestUrl = request.url;\r",
											"var completeCall = \"URL: \\n\"+resquestUrl+\"\\n\\n\"+\"Headers: \\n\"+headerString;\r",
											"/****************  FIN INICIALIZACION  ************************/\r",
											"\r",
											"\r",
											"//El try se utiliza para poder atrapar cualquier excepcion que surja por casos no contemplados\r",
											"\r",
											"try {\r",
											"        var testName = pm.environment.get(\"TestName\");\r",
											"        const response = pm.response.json();\r",
											"\r",
											"        \r",
											"        switch (testName) {\r",
											"            case 'CPA00010 - Probar servicio GET DatosBasicosClientes con CUIT Fisica GoodPath [1]':\r",
											"            //El pm.test no es necesario para la automatizacion. Sirve para las ejecuciones manuales, pero no afecta a la automatizacion\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"        }\r",
											"} catch (error) {\r",
											"    //console.log(error);\r",
											"    \r",
											"    pm.environment.set(\"HuboError\", \"true\");\r",
											"    var mensaje = error.message;\r",
											"    pm.test(\"Error | \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.equal(\"\");\r",
											"    });\r",
											"    pruebas = pruebas + \"Error inesperado: \" + mensaje;\r",
											"    console.log(pruebas)\r",
											"} finally {\r",
											"    var responseString = utils.myPackage.formatearJson(response);\r",
											"    if (pruebas != \"\") {\r",
											"        utils.myPackage.setearEvidenciaConPruebas(completeCall, responseString, pruebas);\r",
											"    } else {\r",
											"        utils.myPackage.setearEvidencia(completeCall, responseString);\r",
											"    }\r",
											"    \r",
											"    postman.setNextRequest('Actualiza Paso');\r",
											"}\r",
											"/*************************** FUNCIONES ****************************************/\r",
											"\r",
											"//Verifica que el codigo de respuesta del servidor, sea el esperado\r",
											"\r",
											" function verificarEstadoResponse(estado) {\r",
											"    //auto:\r",
											"    setHuboError(pm.response.to.have.status(estado));\r",
											"    setPruebas(\"[OK -Response Status: 200] \", \"[FAIL Response Status: Error en el servidor] \");\r",
											"    //manual:\r",
											"    pm.test(\"Status code : \"+ estado, function () {\r",
											"        pm.response.to.have.status(estado);\r",
											"    });\r",
											"};\r",
											"\r",
											"\r",
											"function verificarSchema(response){\r",
											"    var Ajv = require('ajv'),\r",
											"    ajv = new Ajv({logger: console}),\r",
											"    schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"meta\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"method\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"operation\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"method\",\r",
											"        \"operation\"\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"hostId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"tipo\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"domicilio\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"localidad\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"telefono\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"codigoPais\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"documentos\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"tipo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"id\": {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"tipo\",\r",
											"                    \"descripcion\",\r",
											"                    \"id\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"persona\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"apellido\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"tipo\": {\r",
											"                  \"type\": \"integer\"\r",
											"                },\r",
											"                \"identificacion\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"apellido\",\r",
											"                \"tipo\",\r",
											"                \"identificacion\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"hostId\",\r",
											"            \"tipo\",\r",
											"            \"domicilio\",\r",
											"            \"localidad\",\r",
											"            \"telefono\",\r",
											"            \"codigoPais\",\r",
											"            \"documentos\",\r",
											"            \"persona\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"meta\",\r",
											"    \"data\",\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"    //auto:\r",
											"    setHuboError(pm.expect(ajv.validate(schema, response)).to.be.true);\r",
											"    setPruebas(\"[OK Esquema JSON válido] \", \"[FAIL Esquema JSON inválido] \");\r",
											"    //manual:\r",
											"     pm.test('Schema is valid', function () {\r",
											"        pm.expect(ajv.validate(schema, response)).to.be.true;\r",
											"    });   \r",
											"};\r",
											"\r",
											"function validarDatos(response){\r",
											"    //auto:\r",
											"    var apellido = response.data[0].persona.apellido;\r",
											"    var identificacion = response.data[0].persona.identificacion;\r",
											"    var tipoPersona = response.data[0].persona.tipo;\r",
											"    \r",
											"    setHuboError(pm.expect(apellido).to.eql(\"FERNANDEZ\"));\r",
											"    setPruebas(\"[OK - apellido: \" + apellido + \"]\", \"[FAIL - apellido erróneo]\")\r",
											"    \r",
											"    setHuboError(pm.expect(identificacion).to.eql(\"JORGE HORACIO\"));\r",
											"    setPruebas(\"[OK - identificacion: \" + identificacion + \"]\", \"[FAIL - identificacion errónea]\")\r",
											"    \r",
											"    setHuboError(pm.expect(tipoPersona).to.eql(0));\r",
											"    setPruebas(\"[OK - tipo de persona: \" + tipoPersona + \"]\", \"[FAIL - tipo de persona errónea]\")\r",
											"\r",
											"    //manual:\r",
											"    pm.test(\"Apellido: \" + apellido, function () {\r",
											"        pm.expect(apellido).to.eql(\"FERNANDEZ\");\r",
											"    });\r",
											"    pm.test(\"identificacion: \" + identificacion, function () {\r",
											"        pm.expect(identificacion).to.eql(\"JORGE HORACIO\");\r",
											"    });\r",
											"    pm.test(\"Tipo Persona: \" + tipoPersona, function () {\r",
											"        pm.expect(tipoPersona).to.eql(0);\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"function setHuboError(testIsTrue){\r",
											"    if(testIsTrue){\r",
											"            pm.environment.set(\"HuboError\", \"false\");\r",
											"        } else {\r",
											"            pm.environment.set(\"HuboError\", \"true\");\r",
											"        }\r",
											"}\r",
											"\r",
											"function setPruebas(messageOk, messageError){\r",
											"    if(pm.environment.get(\"HuboError\")==\"false\"){\r",
											"                pruebas += messageOk;\r",
											"                }else {\r",
											"                pruebas += messageError;\r",
											"                }\r",
											"}\r",
											"\r",
											"/************************* FIN FUNCIONES ****************************************/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Seteo el servidor acorde a la variable\r",
											"var ambiente = pm.environment.get(\"Ambiente\");\r",
											"\r",
											"\r",
											"\r",
											"var url =\"\";\r",
											"var query1 = \"?tipoDoc=\";\r",
											"var query2 = \"&idDoc=\";\r",
											"var tipoDoc = \"cuit\";\r",
											"var idDoc = \"20117352456\"\r",
											"//Se setea el servidor a utilizar acorde al ambiente\r",
											"\r",
											"switch (ambiente) {\r",
											"    case 'qas':\r",
											"        url= \"SET URL HERE\";\r",
											"        break;\r",
											"    case 'inte':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    case 'desa':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    default:\r",
											"        break;\r",
											"}\r",
											"\r",
											"url = url + query1 + tipoDoc + query2 + idDoc;\r",
											"//console.log(url);\r",
											"pm.environment.set(\"Url\",url);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}",
									"host": [
										"{{Url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cliente By DU Fisica",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************   INICIALIZACION  ************************/\r",
											"//Se setean todas la variables necesarias para registrar el llamado al servicio\r",
											"let utils = eval(environment.utils)();\r",
											"var pruebas = \"\";\r",
											"var response = pm.response.json();\r",
											"var requestJson = request.data;\r",
											"var requestHeaders = pm.request.getHeaders(true,true,false,true);\r",
											"var headerString = utils.myPackage.formatHeaders(requestHeaders);\r",
											"var resquestUrl = request.url;\r",
											"var completeCall = \"URL: \\n\"+resquestUrl+\"\\n\\n\"+\"Headers: \\n\"+headerString;\r",
											"/****************  FIN INICIALIZACION  ************************/\r",
											"\r",
											"\r",
											"//El try se utiliza para poder atrapar cualquier excepcion que surja por casos no contemplados\r",
											"try {\r",
											"        var testName = pm.environment.get(\"TestName\");\r",
											"        const response = pm.response.json();\r",
											"\r",
											"        \r",
											"        switch (testName) {\r",
											"            case 'CPA00030 - Probar servicio GET DatosBasicosClientes con DU Fisica GoodPath [1]':\r",
											"            //El pm.test no es necesario para la automatizacion. Sirve para las ejecuciones manuales, pero no afecta a la automatizacion\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"            case 'Manual':\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"                \r",
											"            break;\r",
											"        }\r",
											"} catch (error) {\r",
											"    //console.log(error);\r",
											"    \r",
											"    pm.environment.set(\"HuboError\", \"true\");\r",
											"    var mensaje = error.message;\r",
											"    pm.test(\"Error | \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.equal(\"\");\r",
											"    });\r",
											"    pruebas = pruebas + \"Error inesperado: \" + mensaje;\r",
											"    console.log(pruebas)\r",
											"} finally {\r",
											"    var responseString = utils.myPackage.formatearJson(response);\r",
											"    if (pruebas != \"\") {\r",
											"        utils.myPackage.setearEvidenciaConPruebas(completeCall, responseString, pruebas);\r",
											"    } else {\r",
											"        utils.myPackage.setearEvidencia(completeCall, responseString);\r",
											"    }\r",
											"    \r",
											"    postman.setNextRequest('Actualiza Paso');\r",
											"}\r",
											"/*************************** FUNCIONES ****************************************/\r",
											"\r",
											"//Verifica que el codigo de respuesta del servidor, sea el esperado\r",
											"\r",
											" function verificarEstadoResponse(estado) {\r",
											"    //auto:\r",
											"    setHuboError(pm.response.to.have.status(estado));\r",
											"    setPruebas(\"[OK -Response Status: 200] \", \"[FAIL Response Status: Error en el servidor] \");\r",
											"    //manual:\r",
											"    pm.test(\"Status code : \"+ estado, function () {\r",
											"        pm.response.to.have.status(estado);\r",
											"    });\r",
											"};\r",
											"\r",
											"\r",
											"function verificarSchema(response){\r",
											"    var Ajv = require('ajv'),\r",
											"    ajv = new Ajv({logger: console}),\r",
											"    schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"meta\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"method\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"operation\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"method\",\r",
											"        \"operation\"\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"hostId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"tipo\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"domicilio\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"localidad\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"telefono\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"codigoPais\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"documentos\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"tipo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"id\": {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"tipo\",\r",
											"                    \"descripcion\",\r",
											"                    \"id\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"persona\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"apellido\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"tipo\": {\r",
											"                  \"type\": \"integer\"\r",
											"                },\r",
											"                \"identificacion\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"apellido\",\r",
											"                \"tipo\",\r",
											"                \"identificacion\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"hostId\",\r",
											"            \"tipo\",\r",
											"            \"domicilio\",\r",
											"            \"localidad\",\r",
											"            \"telefono\",\r",
											"            \"codigoPais\",\r",
											"            \"documentos\",\r",
											"            \"persona\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"meta\",\r",
											"    \"data\",\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"    //auto:\r",
											"    setHuboError(pm.expect(ajv.validate(schema, response)).to.be.true);\r",
											"    setPruebas(\"[OK Esquema JSON válido] \", \"[FAIL Esquema JSON inválido] \");\r",
											"    //manual:\r",
											"     pm.test('Schema is valid', function () {\r",
											"        pm.expect(ajv.validate(schema, response)).to.be.true;\r",
											"    });   \r",
											"};\r",
											"\r",
											"function validarDatos(response){\r",
											"    //auto:\r",
											"    var apellido = response.data[0].persona.apellido;\r",
											"    var identificacion = response.data[0].persona.identificacion;\r",
											"    var tipoPersona = response.data[0].persona.tipo;\r",
											"    \r",
											"    setHuboError(pm.expect(apellido).to.eql(\"FERNANDEZ\"));\r",
											"    setPruebas(\"[OK - apellido: \" + apellido + \"]\", \"[FAIL - apellido erróneo]\")\r",
											"    setHuboError(pm.expect(identificacion).to.eql(\"JORGE HORACIO\"));\r",
											"    setPruebas(\"[OK - identificacion: \" + identificacion + \"]\", \"[FAIL - identificacion errónea]\")\r",
											"    setHuboError(pm.expect(tipoPersona).to.eql(0));\r",
											"    setPruebas(\"[OK - tipo de persona: \" + tipoPersona + \"]\", \"[FAIL - tipo de persona errónea]\")\r",
											"\r",
											"    //manual:\r",
											"    pm.test(\"Apellido: \" + apellido, function () {\r",
											"        pm.expect(apellido).to.eql(\"FERNANDEZ\");\r",
											"    });\r",
											"    pm.test(\"identificacion: \" + identificacion, function () {\r",
											"        pm.expect(identificacion).to.eql(\"JORGE HORACIO\");\r",
											"    });\r",
											"    pm.test(\"Tipo Persona: \" + tipoPersona, function () {\r",
											"        pm.expect(tipoPersona).to.eql(0);\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"function setHuboError(testIsTrue){\r",
											"    if(testIsTrue){\r",
											"            pm.environment.set(\"HuboError\", \"false\");\r",
											"        } else {\r",
											"            pm.environment.set(\"HuboError\", \"true\");\r",
											"        }\r",
											"}\r",
											"\r",
											"function setPruebas(messageOk, messageError){\r",
											"    if(pm.environment.get(\"HuboError\")==\"false\"){\r",
											"                pruebas += messageOk;\r",
											"                }else {\r",
											"                pruebas += messageError;\r",
											"                }\r",
											"}\r",
											"\r",
											"/************************* FIN FUNCIONES ****************************************/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Seteo el servidor acorde a la variable\r",
											"var ambiente = pm.environment.get(\"Ambiente\");\r",
											"\r",
											"\r",
											"\r",
											"var url =\"\";\r",
											"var query1 = \"?tipoDoc=\";\r",
											"var query2 = \"&idDoc=\";\r",
											"var tipoDoc = \"du\";\r",
											"var idDoc = \"11735245\"\r",
											"//Se setea el servidor a utilizar acorde al ambiente\r",
											"\r",
											"switch (ambiente) {\r",
											"    case 'qas':\r",
											"        url= \"SET URL HERE\";\r",
											"        break;\r",
											"    case 'inte':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    case 'desa':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    default:\r",
											"        break;\r",
											"}\r",
											"\r",
											"url = url + query1 + tipoDoc + query2 + idDoc;\r",
											"//console.log(url);\r",
											"pm.environment.set(\"Url\",url);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}",
									"host": [
										"{{Url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cliente By CUIL Fisica",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************   INICIALIZACION  ************************/\r",
											"//Se setean todas la variables necesarias para registrar el llamado al servicio\r",
											"let utils = eval(environment.utils)();\r",
											"var pruebas = \"\";\r",
											"var response = pm.response.json();\r",
											"var requestJson = request.data;\r",
											"var requestHeaders = pm.request.getHeaders(true,true,false,true);\r",
											"var headerString = utils.myPackage.formatHeaders(requestHeaders);\r",
											"var resquestUrl = request.url;\r",
											"var completeCall = \"URL: \\n\"+resquestUrl+\"\\n\\n\"+\"Headers: \\n\"+headerString;\r",
											"/****************  FIN INICIALIZACION  ************************/\r",
											"\r",
											"\r",
											"//El try se utiliza para poder atrapar cualquier excepcion que surja por casos no contemplados\r",
											"try {\r",
											"        var testName = pm.environment.get(\"TestName\");\r",
											"        const response = pm.response.json();\r",
											"\r",
											"        \r",
											"        switch (testName) {\r",
											"            case 'CPA00020 - Probar servicio GET DatosBasicosClientes con CUIL Fisica GoodPath [1]':\r",
											"             //El pm.test no es necesario para la automatizacion. Sirve para las ejecuciones manuales, pero no afecta a la automatizacion\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"            case 'Manual':\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"                \r",
											"            break;\r",
											"        }\r",
											"} catch (error) {\r",
											"    //console.log(error);\r",
											"    \r",
											"    pm.environment.set(\"HuboError\", \"true\");\r",
											"    var mensaje = error.message;\r",
											"    pm.test(\"Error | \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.equal(\"\");\r",
											"    });\r",
											"    pruebas = pruebas + \"Error inesperado: \" + mensaje;\r",
											"    console.log(pruebas)\r",
											"} finally {\r",
											"    var responseString = utils.myPackage.formatearJson(response);\r",
											"    if (pruebas != \"\") {\r",
											"        utils.myPackage.setearEvidenciaConPruebas(completeCall, responseString, pruebas);\r",
											"    } else {\r",
											"        utils.myPackage.setearEvidencia(completeCall, responseString);\r",
											"    }\r",
											"    \r",
											"    postman.setNextRequest('Actualiza Paso');\r",
											"}\r",
											"/*************************** FUNCIONES ****************************************/\r",
											"\r",
											"//Verifica que el codigo de respuesta del servidor, sea el esperado\r",
											"\r",
											" function verificarEstadoResponse(estado) {\r",
											"    //auto:\r",
											"    setHuboError(pm.response.to.have.status(estado));\r",
											"    setPruebas(\"[OK -Response Status: 200] \", \"[FAIL Response Status: Error en el servidor] \");\r",
											"    //manual:\r",
											"    pm.test(\"Status code : \"+ estado, function () {\r",
											"        pm.response.to.have.status(estado);\r",
											"    });\r",
											"};\r",
											"\r",
											"\r",
											"function verificarSchema(response){\r",
											"    var Ajv = require('ajv'),\r",
											"    ajv = new Ajv({logger: console}),\r",
											"    schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"meta\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"method\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"operation\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"method\",\r",
											"        \"operation\"\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"hostId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"tipo\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"domicilio\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"localidad\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"telefono\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"codigoPais\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"documentos\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"tipo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"id\": {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"tipo\",\r",
											"                    \"descripcion\",\r",
											"                    \"id\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"persona\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"apellido\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"tipo\": {\r",
											"                  \"type\": \"integer\"\r",
											"                },\r",
											"                \"identificacion\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"apellido\",\r",
											"                \"tipo\",\r",
											"                \"identificacion\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"hostId\",\r",
											"            \"tipo\",\r",
											"            \"domicilio\",\r",
											"            \"localidad\",\r",
											"            \"telefono\",\r",
											"            \"codigoPais\",\r",
											"            \"documentos\",\r",
											"            \"persona\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"meta\",\r",
											"    \"data\",\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"    //auto:\r",
											"    setHuboError(pm.expect(ajv.validate(schema, response)).to.be.true);\r",
											"    setPruebas(\"[OK Esquema JSON válido] \", \"[FAIL Esquema JSON inválido] \");\r",
											"    //manual:\r",
											"     pm.test('Schema is valid', function () {\r",
											"        pm.expect(ajv.validate(schema, response)).to.be.true;\r",
											"    });   \r",
											"};\r",
											"\r",
											"function validarDatos(response){\r",
											"    //auto:\r",
											"    var apellido = response.data[0].persona.apellido;\r",
											"    var identificacion = response.data[0].persona.identificacion;\r",
											"    var tipoPersona = response.data[0].persona.tipo;\r",
											"    \r",
											"    setHuboError(pm.expect(apellido).to.eql(\"FERNANDEZ\"));\r",
											"    setPruebas(\"[OK - apellido: \" + apellido + \"]\", \"[FAIL - apellido erróneo]\")\r",
											"    setHuboError(pm.expect(identificacion).to.eql(\"JORGE HORACIO\"));\r",
											"    setPruebas(\"[OK - identificacion: \" + identificacion + \"]\", \"[FAIL - identificacion errónea]\")\r",
											"    setHuboError(pm.expect(tipoPersona).to.eql(0));\r",
											"    setPruebas(\"[OK - tipo de persona: \" + tipoPersona + \"]\", \"[FAIL - tipo de persona errónea]\")\r",
											"\r",
											"    //manual:\r",
											"    pm.test(\"Apellido: \" + apellido, function () {\r",
											"        pm.expect(apellido).to.eql(\"FERNANDEZ\");\r",
											"    });\r",
											"    pm.test(\"identificacion: \" + identificacion, function () {\r",
											"        pm.expect(identificacion).to.eql(\"JORGE HORACIO\");\r",
											"    });\r",
											"    pm.test(\"Tipo Persona: \" + tipoPersona, function () {\r",
											"        pm.expect(tipoPersona).to.eql(0);\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"function setHuboError(testIsTrue){\r",
											"    if(testIsTrue){\r",
											"            pm.environment.set(\"HuboError\", \"false\");\r",
											"        } else {\r",
											"            pm.environment.set(\"HuboError\", \"true\");\r",
											"        }\r",
											"}\r",
											"\r",
											"function setPruebas(messageOk, messageError){\r",
											"    if(pm.environment.get(\"HuboError\")==\"false\"){\r",
											"                pruebas += messageOk;\r",
											"                }else {\r",
											"                pruebas += messageError;\r",
											"                }\r",
											"}\r",
											"\r",
											"/************************* FIN FUNCIONES ****************************************/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Seteo el servidor acorde a la variable\r",
											"var ambiente = pm.environment.get(\"Ambiente\");\r",
											"\r",
											"\r",
											"\r",
											"var url =\"\";\r",
											"var query1 = \"?tipoDoc=\";\r",
											"var query2 = \"&idDoc=\";\r",
											"var tipoDoc = \"cuil\";\r",
											"var idDoc = \"20117352456\"\r",
											"//Se setea el servidor a utilizar acorde al ambiente\r",
											"\r",
											"switch (ambiente) {\r",
											"    case 'qas':\r",
											"        url= \"SET URL HERE\";\r",
											"        break;\r",
											"    case 'inte':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    case 'desa':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    default:\r",
											"        break;\r",
											"}\r",
											"\r",
											"url = url + query1 + tipoDoc + query2 + idDoc;\r",
											"//console.log(url);\r",
											"pm.environment.set(\"Url\",url);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}",
									"host": [
										"{{Url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clasificacion Cliente Fisica",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************   INICIALIZACION  ************************/\r",
											"//Se setean todas la variables necesarias para registrar el llamado al servicio\r",
											"let utils = eval(environment.utils)();\r",
											"var pruebas = \"\";\r",
											"var response = pm.response.json();\r",
											"var requestJson = request.data;\r",
											"var requestHeaders = pm.request.getHeaders(true,true,false,true);\r",
											"var headerString = utils.myPackage.formatHeaders(requestHeaders);\r",
											"var resquestUrl = request.url;\r",
											"var completeCall = \"URL: \\n\"+resquestUrl+\"\\n\\n\"+\"Headers: \\n\"+headerString;\r",
											"/****************  FIN INICIALIZACION  ************************/\r",
											"\r",
											"\r",
											"//El try se utiliza para poder atrapar cualquier excepcion que surja por casos no contemplados\r",
											"try {\r",
											"        var testName = pm.environment.get(\"TestName\");\r",
											"        const response = pm.response.json();\r",
											"\r",
											"        \r",
											"        switch (testName) {\r",
											"            case 'CPA00050 - Probar servicio GET ClasificacionCliente Fisica con HostId GoodPath [1]':\r",
											"            //El pm.test no es necesario para la automatizacion. Sirve para las ejecuciones manuales, pero no afecta a la automatizacion\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"            case 'Manual':\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"        }\r",
											"} catch (error) {\r",
											"    //console.log(error);\r",
											"    \r",
											"    pm.environment.set(\"HuboError\", \"true\");\r",
											"    var mensaje = error.message;\r",
											"    pm.test(\"Error | \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.equal(\"\");\r",
											"    });\r",
											"    pruebas = pruebas + \"Error inesperado: \" + mensaje;\r",
											"    console.log(pruebas)\r",
											"} finally {\r",
											"    var responseString = utils.myPackage.formatearJson(response);\r",
											"    if (pruebas != \"\") {\r",
											"        utils.myPackage.setearEvidenciaConPruebas(completeCall, responseString, pruebas);\r",
											"    } else {\r",
											"        utils.myPackage.setearEvidencia(completeCall, responseString);\r",
											"    }\r",
											"    \r",
											"    postman.setNextRequest('Actualiza Paso');\r",
											"}\r",
											"/*************************** FUNCIONES ****************************************/\r",
											"\r",
											"//Verifica que el codigo de respuesta del servidor, sea el esperado\r",
											"\r",
											" function verificarEstadoResponse(estado) {\r",
											"    //auto:\r",
											"    setHuboError(pm.response.to.have.status(estado));\r",
											"    setPruebas(\"[OK -Response Status: 200] \", \"[FAIL Response Status: Error en el servidor] \");\r",
											"    //manual:\r",
											"    pm.test(\"Status code : \"+ estado, function () {\r",
											"        pm.response.to.have.status(estado);\r",
											"    });\r",
											"};\r",
											"\r",
											"\r",
											"function verificarSchema(response){\r",
											"    var Ajv = require('ajv'),\r",
											"    ajv = new Ajv({logger: console}),\r",
											"    schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"meta\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"method\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"operation\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"method\",\r",
											"        \"operation\"\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"segmentoId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"sucursalId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"funcionarioId\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"segmentoId\",\r",
											"        \"sucursalId\",\r",
											"        \"funcionarioId\"\r",
											"      ]\r",
											"    },\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"meta\",\r",
											"    \"data\",\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"    //auto:\r",
											"    setHuboError(pm.expect(ajv.validate(schema, response)).to.be.true);\r",
											"    setPruebas(\"[OK Esquema JSON válido] \", \"[FAIL Esquema JSON inválido] \");\r",
											"    //manual:\r",
											"     pm.test('Schema is valid', function () {\r",
											"        pm.expect(ajv.validate(schema, response)).to.be.true;\r",
											"    });   \r",
											"};\r",
											"\r",
											"function setHuboError(testIsTrue){\r",
											"    if(testIsTrue){\r",
											"            pm.environment.set(\"HuboError\", \"false\");\r",
											"        } else {\r",
											"            pm.environment.set(\"HuboError\", \"true\");\r",
											"        }\r",
											"}\r",
											"\r",
											"function setPruebas(messageOk, messageError){\r",
											"    if(pm.environment.get(\"HuboError\")==\"false\"){\r",
											"                pruebas += messageOk;\r",
											"                }else {\r",
											"                pruebas += messageError;\r",
											"                }\r",
											"}\r",
											"\r",
											"/************************* FIN FUNCIONES ****************************************/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Seteo el servidor acorde a la variable\r",
											"var ambiente = pm.environment.get(\"Ambiente\");\r",
											"\r",
											"\r",
											"\r",
											"var url =\"\";\r",
											"var query1 = \"?hostId=\";\r",
											"var idDoc = \"4174272\"\r",
											"//Se setea el servidor a utilizar acorde al ambiente\r",
											"\r",
											"switch (ambiente) {\r",
											"    case 'qas':\r",
											"        url= \"SET URL HERE\";\r",
											"        break;\r",
											"    case 'inte':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    case 'desa':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    default:\r",
											"        break;\r",
											"}\r",
											"\r",
											"url = url + query1 + idDoc;\r",
											"//console.log(url);\r",
											"pm.environment.set(\"Url\",url);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}",
									"host": [
										"{{Url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sector Contable Persona Fisica",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************   INICIALIZACION  ************************/\r",
											"//Se setean todas la variables necesarias para registrar el llamado al servicio\r",
											"let utils = eval(environment.utils)();\r",
											"var pruebas = \"\";\r",
											"var response = pm.response.json();\r",
											"var requestJson = request.data;\r",
											"var requestHeaders = pm.request.getHeaders(true,true,false,true);\r",
											"var headerString = utils.myPackage.formatHeaders(requestHeaders);\r",
											"var resquestUrl = request.url;\r",
											"var completeCall = \"URL: \\n\"+resquestUrl+\"\\n\\n\"+\"Headers: \\n\"+headerString;\r",
											"/****************  FIN INICIALIZACION  ************************/\r",
											"\r",
											"\r",
											"//El try se utiliza para poder atrapar cualquier excepcion que surja por casos no contemplados\r",
											"try {\r",
											"        var testName = pm.environment.get(\"TestName\");\r",
											"        const response = pm.response.json();\r",
											"\r",
											"        \r",
											"        switch (testName) {\r",
											"            case 'CPA00040 - Probar servicio GET SectorContablePersona Fisica con HostId GoodPath [1]':\r",
											"            //El pm.test no es necesario para la automatizacion. Sirve para las ejecuciones manuales, pero no afecta a la automatizacion\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"            case 'Manual':\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                console.log(pruebas);\r",
											"            break;            \r",
											"        }\r",
											"} catch (error) {\r",
											"    //console.log(error);\r",
											"    \r",
											"    pm.environment.set(\"HuboError\", \"true\");\r",
											"    var mensaje = error.message;\r",
											"    pm.test(\"Error | \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.equal(\"\");\r",
											"    });\r",
											"    pruebas = pruebas + \"Error inesperado: \" + mensaje;\r",
											"    console.log(pruebas)\r",
											"} finally {\r",
											"    var responseString = utils.myPackage.formatearJson(response);\r",
											"    if (pruebas != \"\") {\r",
											"        utils.myPackage.setearEvidenciaConPruebas(completeCall, responseString, pruebas);\r",
											"    } else {\r",
											"        utils.myPackage.setearEvidencia(completeCall, responseString);\r",
											"    }\r",
											"    \r",
											"    postman.setNextRequest('Actualiza Paso');\r",
											"}\r",
											"/*************************** FUNCIONES ****************************************/\r",
											"\r",
											"//Verifica que el codigo de respuesta del servidor, sea el esperado\r",
											"\r",
											" function verificarEstadoResponse(estado) {\r",
											"    //auto:\r",
											"    setHuboError(pm.response.to.have.status(estado));\r",
											"    setPruebas(\"[OK -Response Status: 200] \", \"[FAIL Response Status: Error en el servidor] \");\r",
											"    //manual:\r",
											"    pm.test(\"Status code : \"+ estado, function () {\r",
											"        pm.response.to.have.status(estado);\r",
											"    });\r",
											"};\r",
											"\r",
											"\r",
											"function verificarSchema(response){\r",
											"    var Ajv = require('ajv'),\r",
											"    ajv = new Ajv({logger: console}),\r",
											"    schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"meta\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"method\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"operation\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"method\",\r",
											"        \"operation\"\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"meta\",\r",
											"    \"data\",\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"    //auto:\r",
											"    setHuboError(pm.expect(ajv.validate(schema, response)).to.be.true);\r",
											"    setPruebas(\"[OK Esquema JSON válido] \", \"[FAIL Esquema JSON inválido] \");\r",
											"    //manual:\r",
											"     pm.test('Schema is valid', function () {\r",
											"        pm.expect(ajv.validate(schema, response)).to.be.true;\r",
											"    });   \r",
											"};\r",
											"\r",
											"function setHuboError(testIsTrue){\r",
											"    if(testIsTrue){\r",
											"            pm.environment.set(\"HuboError\", \"false\");\r",
											"        } else {\r",
											"            pm.environment.set(\"HuboError\", \"true\");\r",
											"        }\r",
											"}\r",
											"\r",
											"function setPruebas(messageOk, messageError){\r",
											"    if(pm.environment.get(\"HuboError\")==\"false\"){\r",
											"                pruebas += messageOk;\r",
											"                }else {\r",
											"                pruebas += messageError;\r",
											"                }\r",
											"}\r",
											"\r",
											"/************************* FIN FUNCIONES ****************************************/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Seteo el servidor acorde a la variable\r",
											"var ambiente = pm.environment.get(\"Ambiente\");\r",
											"\r",
											"\r",
											"\r",
											"var url =\"\";\r",
											"var query1 = \"?hostId=\";\r",
											"var idDoc = \"4174272\"\r",
											"//Se setea el servidor a utilizar acorde al ambiente\r",
											"\r",
											"switch (ambiente) {\r",
											"    case 'qas':\r",
											"        url= \"SET URL HERE\";\r",
											"        break;\r",
											"    case 'inte':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    case 'desa':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    default:\r",
											"        break;\r",
											"}\r",
											"\r",
											"url = url + query1 + idDoc;\r",
											"//console.log(url);\r",
											"pm.environment.set(\"Url\",url);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}",
									"host": [
										"{{Url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Datos Basicos Persona Fisica",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************   INICIALIZACION  ************************/\r",
											"//Se setean todas la variables necesarias para registrar el llamado al servicio\r",
											"let utils = eval(environment.utils)();\r",
											"var pruebas = \"\";\r",
											"var response = pm.response.json();\r",
											"var requestJson = request.data;\r",
											"var requestHeaders = pm.request.getHeaders(true,true,false,true);\r",
											"var headerString = utils.myPackage.formatHeaders(requestHeaders);\r",
											"var resquestUrl = request.url;\r",
											"var completeCall = \"URL: \\n\"+resquestUrl+\"\\n\\n\"+\"Headers: \\n\"+headerString;\r",
											"/****************  FIN INICIALIZACION  ************************/\r",
											"\r",
											"\r",
											"//El try se utiliza para poder atrapar cualquier excepcion que surja por casos no contemplados\r",
											"try {\r",
											"        var testName = pm.environment.get(\"TestName\");\r",
											"        const response = pm.response.json();\r",
											"\r",
											"        \r",
											"        switch (testName) {\r",
											"            case 'CPA00060 - Probar servicio GET DatosBasicosPersona Fisica con HostIdGoodPath [1]':\r",
											"            //El pm.test no es necesario para la automatizacion. Sirve para las ejecuciones manuales, pero no afecta a la automatizacion\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"            case 'Manual':\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"        }\r",
											"} catch (error) {\r",
											"    //console.log(error);\r",
											"    \r",
											"    pm.environment.set(\"HuboError\", \"true\");\r",
											"    var mensaje = error.message;\r",
											"    pm.test(\"Error | \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.equal(\"\");\r",
											"    });\r",
											"    pruebas = pruebas + \"Error inesperado: \" + mensaje;\r",
											"    console.log(pruebas)\r",
											"} finally {\r",
											"    var responseString = utils.myPackage.formatearJson(response);\r",
											"    if (pruebas != \"\") {\r",
											"        utils.myPackage.setearEvidenciaConPruebas(completeCall, responseString, pruebas);\r",
											"    } else {\r",
											"        utils.myPackage.setearEvidencia(completeCall, responseString);\r",
											"    }\r",
											"    \r",
											"    postman.setNextRequest('Actualiza Paso');\r",
											"}\r",
											"/*************************** FUNCIONES ****************************************/\r",
											"\r",
											"//Verifica que el codigo de respuesta del servidor, sea el esperado\r",
											"\r",
											" function verificarEstadoResponse(estado) {\r",
											"    //auto:\r",
											"    setHuboError(pm.response.to.have.status(estado));\r",
											"    setPruebas(\"[OK -Response Status: 200] \", \"[FAIL Response Status: Error en el servidor] \");\r",
											"    //manual:\r",
											"    pm.test(\"Status code : \"+ estado, function () {\r",
											"        pm.response.to.have.status(estado);\r",
											"    });\r",
											"};\r",
											"\r",
											"\r",
											"function verificarSchema(response){\r",
											"    var Ajv = require('ajv'),\r",
											"    ajv = new Ajv({logger: console}),\r",
											"    schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"meta\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"method\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"operation\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"method\",\r",
											"        \"operation\"\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"tipoDatosBasicosPersona\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"documentos\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"tipo\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"numero\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"tipoDatosBasicosPersona\": {\r",
											"                  \"type\": \"integer\"\r",
											"                },\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"tipo\",\r",
											"                \"numero\",\r",
											"                \"tipoDatosBasicosPersona\",\r",
											"              ]\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"nombrePersona\": {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"nombre\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"apellido\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"tipoDatosBasicosPersona\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"nombre\",\r",
											"            \"apellido\",\r",
											"            \"tipoDatosBasicosPersona\",\r",
											"          ]\r",
											"        },\r",
											"        \"codigoSexo\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"codigoEstadoCivil\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"tipoDatosBasicosPersona\",\r",
											"        \"documentos\",\r",
											"        \"nombrePersona\",\r",
											"        \"codigoSexo\",\r",
											"        \"codigoEstadoCivil\",\r",
											"      ]\r",
											"    },\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"meta\",\r",
											"    \"data\",\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"    //auto:\r",
											"    setHuboError(pm.expect(ajv.validate(schema, response)).to.be.true);\r",
											"    setPruebas(\"[OK Esquema JSON válido] \", \"[FAIL Esquema JSON inválido] \");\r",
											"    //manual:\r",
											"     pm.test('Schema is valid', function () {\r",
											"        pm.expect(ajv.validate(schema, response)).to.be.true;\r",
											"    });   \r",
											"};\r",
											"\r",
											"function validarDatos(response){\r",
											"    //auto:\r",
											"    var apellido = response.data.nombrePersona.apellido;\r",
											"    var nombre = response.data.nombrePersona.nombre;\r",
											"    \r",
											"\r",
											"    setHuboError(pm.expect(apellido).to.eql(\"FERNANDEZ\"));\r",
											"    setPruebas(\"[OK - apellido: \" + apellido + \"]\", \"[FAIL - apellido erróneo]\")\r",
											"    setHuboError(pm.expect(nombre).to.eql(\"JORGE HORACIO\"));\r",
											"    setPruebas(\"[OK - nombre: \" + nombre + \"]\", \"[FAIL - nombre errónea]\")\r",
											"    \r",
											"\r",
											"    //manual:\r",
											"    pm.test(\"Apellido: \" + apellido, function () {\r",
											"        pm.expect(apellido).to.eql(\"FERNANDEZ\");\r",
											"    });\r",
											"    pm.test(\"nombre: \" + nombre, function () {\r",
											"        pm.expect(nombre).to.eql(\"JORGE HORACIO\");\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"function setHuboError(testIsTrue){\r",
											"    if(testIsTrue){\r",
											"            pm.environment.set(\"HuboError\", \"false\");\r",
											"        } else {\r",
											"            pm.environment.set(\"HuboError\", \"true\");\r",
											"        }\r",
											"}\r",
											"\r",
											"function setPruebas(messageOk, messageError){\r",
											"    if(pm.environment.get(\"HuboError\")==\"false\"){\r",
											"                pruebas += messageOk;\r",
											"                }else {\r",
											"                pruebas += messageError;\r",
											"                }\r",
											"}\r",
											"\r",
											"/************************* FIN FUNCIONES ****************************************/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Seteo el servidor acorde a la variable\r",
											"var ambiente = pm.environment.get(\"Ambiente\");\r",
											"\r",
											"\r",
											"\r",
											"var url =\"\";\r",
											"var query1 = \"?hostId=\";\r",
											"var idDoc = \"4174272\"\r",
											"//Se setea el servidor a utilizar acorde al ambiente\r",
											"\r",
											"switch (ambiente) {\r",
											"    case 'qas':\r",
											"        url= \"SET URL HERE\";\r",
											"        break;\r",
											"    case 'inte':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    case 'desa':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    default:\r",
											"        break;\r",
											"}\r",
											"\r",
											"url = url + query1 + idDoc;\r",
											"//console.log(url);\r",
											"pm.environment.set(\"Url\",url);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}",
									"host": [
										"{{Url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consulta Posicion Fisica",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Seteo el servidor acorde a la variable\r",
											"var ambiente = pm.environment.get(\"Ambiente\");\r",
											"\r",
											"\r",
											"\r",
											"var url =\"\";\r",
											"\r",
											"//Se setea el servidor a utilizar acorde al ambiente\r",
											"\r",
											"switch (ambiente) {\r",
											"    case 'qas':\r",
											"        url= \"SET URL HERE\";\r",
											"        break;\r",
											"    case 'inte':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    case 'desa':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    default:\r",
											"        break;\r",
											"}\r",
											"\r",
											"url = url;\r",
											"//console.log(url);\r",
											"pm.environment.set(\"Url\",url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************   INICIALIZACION  ************************/\r",
											"//Se setean todas la variables necesarias para registrar el llamado al servicio\r",
											"let utils = eval(environment.utils)();\r",
											"var pruebas = \"\";\r",
											"var response = pm.response.json();\r",
											"var requestJson = request.data;\r",
											"var requestHeaders = pm.request.getHeaders(true,true,false,true);\r",
											"var headerString = utils.myPackage.formatHeaders(requestHeaders);\r",
											"var resquestUrl = request.url;\r",
											"var completeCall = \"URL: \\n\"+resquestUrl+\"\\n\\n\"+\"Headers: \\n\"+headerString;\r",
											"/****************  FIN INICIALIZACION  ************************/\r",
											"\r",
											"\r",
											"//El try se utiliza para poder atrapar cualquier excepcion que surja por casos no contemplados\r",
											"try {\r",
											"        var testName = pm.environment.get(\"TestName\");\r",
											"        const response = pm.response.json();\r",
											"\r",
											"        \r",
											"        switch (testName) {\r",
											"            case 'CPA00070 - Probar servicio POST ConsultaPosicion Fisica con HostId GoodPath [1]':\r",
											"            //El pm.test no es necesario para la automatizacion. Sirve para las ejecuciones manuales, pero no afecta a la automatizacion\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);                \r",
											"            break;\r",
											"            case 'Manual':\r",
											"            verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);    \r",
											"            break;\r",
											"        }\r",
											"} catch (error) {\r",
											"    //console.log(error);\r",
											"    \r",
											"    pm.environment.set(\"HuboError\", \"true\");\r",
											"    var mensaje = error.message;\r",
											"    pm.test(\"Error | \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.equal(\"\");\r",
											"    });\r",
											"    pruebas = pruebas + \"Error inesperado: \" + mensaje;\r",
											"    console.log(pruebas)\r",
											"} finally {\r",
											"    var responseString = utils.myPackage.formatearJson(response);\r",
											"    if (pruebas != \"\") {\r",
											"        utils.myPackage.setearEvidenciaConPruebas(completeCall, responseString, pruebas);\r",
											"    } else {\r",
											"        utils.myPackage.setearEvidencia(completeCall, responseString);\r",
											"    }\r",
											"    \r",
											"    postman.setNextRequest('Actualiza Paso');\r",
											"}\r",
											"/*************************** FUNCIONES ****************************************/\r",
											"\r",
											"//Verifica que el codigo de respuesta del servidor, sea el esperado\r",
											"\r",
											" function verificarEstadoResponse(estado) {\r",
											"    //auto:\r",
											"    setHuboError(pm.response.to.have.status(estado));\r",
											"    setPruebas(\"[OK -Response Status: 200] \", \"[FAIL Response Status: Error en el servidor] \");\r",
											"    //manual:\r",
											"    pm.test(\"Status code : \"+ estado, function () {\r",
											"        pm.response.to.have.status(estado);\r",
											"    });\r",
											"};\r",
											"\r",
											"\r",
											"function verificarSchema(response){\r",
											"    var Ajv = require('ajv'),\r",
											"    ajv = new Ajv({logger: console}),\r",
											"    schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"meta\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"method\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"operation\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"method\",\r",
											"        \"operation\"\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"tipoConsultaPosicion\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"cantidadProductos\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"empleado\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"posicionPropia\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"productos\": {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"cuentas\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"tipoConsultaPosicion\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"cantidadProductos\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"empleado\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"posicionPropia\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"productos\": {\r",
											"              \"type\": \"null\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"cuentas\",\r",
											"            \"tipoConsultaPosicion\",\r",
											"            \"cantidadProductos\",\r",
											"            \"empleado\",\r",
											"            \"posicionPropia\",\r",
											"            \"productos\"\r",
											"          ]\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"tipoConsultaPosicion\",\r",
											"        \"cantidadProductos\",\r",
											"        \"empleado\",\r",
											"        \"posicionPropia\",\r",
											"        \"productos\"\r",
											"      ]\r",
											"    },\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"meta\",\r",
											"    \"data\",\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"    //auto:\r",
											"    setHuboError(pm.expect(ajv.validate(schema, response)).to.be.true);\r",
											"    setPruebas(\"[OK Esquema JSON válido] \", \"[FAIL Esquema JSON inválido] \");\r",
											"    //manual:\r",
											"     pm.test('Schema is valid', function () {\r",
											"        pm.expect(ajv.validate(schema, response)).to.be.true;\r",
											"    });   \r",
											"};\r",
											"\r",
											"function validarDatos(response){\r",
											"    //auto:\r",
											"    var codigo = response.data.productos.cuentas[0].codigo;\r",
											"    var descripcion = response.data.productos.cuentas[0].descripcion;\r",
											"    var numero = response.data.productos.cuentas[0].numero;\r",
											"    var moneda = response.data.productos.cuentas[0].moneda;\r",
											"\r",
											"    setHuboError(pm.expect(codigo).to.eql(1));\r",
											"    setPruebas(\"[OK - código: \" + codigo + \"]\", \"[FAIL - código erróneo]\")\r",
											"    setHuboError(pm.expect(descripcion).to.eql(\"Caja de Ahorro\"));\r",
											"    setPruebas(\"[OK - descripcion: \" + descripcion + \"]\", \"[FAIL - descripcion errónea]\")\r",
											"    setHuboError(pm.expect(numero).to.eql(\"539239759991\"));\r",
											"    setPruebas(\"[OK - número de cuenta: \" + numero + \"]\", \"[FAIL - número erróneo]\")\r",
											"    setHuboError(pm.expect(moneda).to.eql(2));\r",
											"    setPruebas(\"[OK - moneda: \" + moneda + \"]\", \"[FAIL - moneda errónea]\")\r",
											"\r",
											"    //manual:\r",
											"    pm.test(\"Codigo: \" + codigo, function () {\r",
											"        pm.expect(codigo).to.eql(1);\r",
											"    });\r",
											"    pm.test(\"Descripcion: \" + descripcion, function () {\r",
											"        pm.expect(descripcion).to.eql(\"Caja de Ahorro\");\r",
											"    });\r",
											"    pm.test(\"Número: \" + numero, function () {\r",
											"        pm.expect(numero).to.eql(\"539239759991\");\r",
											"    });\r",
											"     pm.test(\"Moneda: \" + moneda, function () {\r",
											"        pm.expect(moneda).to.eql(2);\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"function setHuboError(testIsTrue){\r",
											"    if(testIsTrue){\r",
											"            pm.environment.set(\"HuboError\", \"false\");\r",
											"        } else {\r",
											"            pm.environment.set(\"HuboError\", \"true\");\r",
											"        }\r",
											"}\r",
											"\r",
											"function setPruebas(messageOk, messageError){\r",
											"    if(pm.environment.get(\"HuboError\")==\"false\"){\r",
											"                pruebas += messageOk;\r",
											"                }else {\r",
											"                pruebas += messageError;\r",
											"                }\r",
											"}\r",
											"\r",
											"/************************* FIN FUNCIONES ****************************************/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"hostId\": \"4174272\",\r\n  \"productosSolicitados\": [\r\n    {\r\n      \"codigo\": \"CA\",\r\n      \"informacionAdicional\": false\r\n    },\r\n    {\r\n      \"codigo\": \"CC\",\r\n      \"informacionAdicional\": false\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}",
									"host": [
										"{{Url}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Juridica",
					"item": [
						{
							"name": "Cliente By CUIT Juridica",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************   INICIALIZACION  ************************/\r",
											"//Se setean todas la variables necesarias para registrar el llamado al servicio\r",
											"let utils = eval(environment.utils)();\r",
											"var pruebas = \"\";\r",
											"var response = pm.response.json();\r",
											"var requestJson = request.data;\r",
											"var requestHeaders = pm.request.getHeaders(true,true,false,true);\r",
											"var headerString = utils.myPackage.formatHeaders(requestHeaders);\r",
											"var resquestUrl = request.url;\r",
											"var completeCall = \"URL: \\n\"+resquestUrl+\"\\n\\n\"+\"Headers: \\n\"+headerString;\r",
											"/****************  FIN INICIALIZACION  ************************/\r",
											"\r",
											"\r",
											"//El try se utiliza para poder atrapar cualquier excepcion que surja por casos no contemplados\r",
											"try {\r",
											"        var testName = pm.environment.get(\"TestName\");\r",
											"        const response = pm.response.json();\r",
											"\r",
											"        \r",
											"        switch (testName) {\r",
											"            case 'CPA00090 - Probar Servicio GET DatosBasicosCliente con CUIT GoodPath [1]':\r",
											"            //El pm.test no es necesario para la automatizacion. Sirve para las ejecuciones manuales, pero no afecta a la automatizacion\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"            case 'Manual':\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"        }\r",
											"} catch (error) {\r",
											"    //console.log(error);\r",
											"    \r",
											"    pm.environment.set(\"HuboError\", \"true\");\r",
											"    var mensaje = error.message;\r",
											"    pm.test(\"Error | \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.equal(\"\");\r",
											"    });\r",
											"    pruebas = pruebas + \"Error inesperado: \" + mensaje;\r",
											"    console.log(pruebas)\r",
											"} finally {\r",
											"    var responseString = utils.myPackage.formatearJson(response);\r",
											"    if (pruebas != \"\") {\r",
											"        utils.myPackage.setearEvidenciaConPruebas(completeCall, responseString, pruebas);\r",
											"    } else {\r",
											"        utils.myPackage.setearEvidencia(completeCall, responseString);\r",
											"    }\r",
											"    \r",
											"    postman.setNextRequest('Actualiza Paso');\r",
											"}\r",
											"/*************************** FUNCIONES ****************************************/\r",
											"\r",
											"//Verifica que el codigo de respuesta del servidor, sea el esperado\r",
											"\r",
											" function verificarEstadoResponse(estado) {\r",
											"    //auto:\r",
											"    setHuboError(pm.response.to.have.status(estado));\r",
											"    setPruebas(\"[OK -Response Status: 200] \", \"[FAIL Response Status: Error en el servidor] \");\r",
											"    //manual:\r",
											"    pm.test(\"Status code : \"+ estado, function () {\r",
											"        pm.response.to.have.status(estado);\r",
											"    });\r",
											"};\r",
											"\r",
											"\r",
											"function verificarSchema(response){\r",
											"    var Ajv = require('ajv'),\r",
											"    ajv = new Ajv({logger: console}),\r",
											"    schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"meta\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"method\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"operation\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"method\",\r",
											"        \"operation\"\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"hostId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"tipo\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"domicilio\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"localidad\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"telefono\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"codigoPais\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"documentos\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"tipo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"id\": {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"tipo\",\r",
											"                    \"descripcion\",\r",
											"                    \"id\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"persona\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"apellido\": {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                \"apellidoCasada\": {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                \"tipo\": {\r",
											"                  \"type\": \"integer\"\r",
											"                },\r",
											"                \"identificacion\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"apellido\",\r",
											"                \"apellidoCasada\",\r",
											"                \"tipo\",\r",
											"                \"identificacion\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"hostId\",\r",
											"            \"tipo\",\r",
											"            \"domicilio\",\r",
											"            \"localidad\",\r",
											"            \"telefono\",\r",
											"            \"codigoPais\",\r",
											"            \"documentos\",\r",
											"            \"persona\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"meta\",\r",
											"    \"data\",\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"    //auto:\r",
											"    setHuboError(pm.expect(ajv.validate(schema, response)).to.be.true);\r",
											"    setPruebas(\"[OK Esquema JSON válido] \", \"[FAIL Esquema JSON inválido] \");\r",
											"    //manual:\r",
											"     pm.test('Schema is valid', function () {\r",
											"        pm.expect(ajv.validate(schema, response)).to.be.true;\r",
											"    });   \r",
											"};\r",
											"\r",
											"function validarDatos(response){\r",
											"    //auto:\r",
											"    var identificacion = response.data[0].persona.identificacion;\r",
											"    var tipoPersona = response.data[0].persona.tipo;\r",
											"    \r",
											"    setHuboError(pm.expect(identificacion).to.eql(\"IVECO ARGENTINA S A NOMBRE MAS LARGO DE 40 CARAC\"));\r",
											"    setPruebas(\"[OK - identificacion: \" + identificacion + \"]\", \"[FAIL - identificacion errónea]\");\r",
											"\r",
											"    setHuboError(pm.expect(tipoPersona).to.eql(1));\r",
											"    setPruebas(\"[OK - tipo de persona: \" + tipoPersona + \"]\", \"[FAIL - tipo de persona errónea]\")\r",
											"\r",
											"    //manual:\r",
											"    pm.test(\"identificacion: \" + identificacion, function () {\r",
											"        pm.expect(identificacion).to.eql(\"IVECO ARGENTINA S A NOMBRE MAS LARGO DE 40 CARAC\");\r",
											"    });\r",
											"    pm.test(\"Tipo Persona: \" + tipoPersona, function () {\r",
											"        pm.expect(tipoPersona).to.eql(1);\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"function setHuboError(testIsTrue){\r",
											"    if(testIsTrue){\r",
											"            pm.environment.set(\"HuboError\", \"false\");\r",
											"        } else {\r",
											"            pm.environment.set(\"HuboError\", \"true\");\r",
											"        }\r",
											"}\r",
											"\r",
											"function setPruebas(messageOk, messageError){\r",
											"    if(pm.environment.get(\"HuboError\")==\"false\"){\r",
											"                pruebas += messageOk;\r",
											"                }else {\r",
											"                pruebas += messageError;\r",
											"                }\r",
											"}\r",
											"\r",
											"/************************* FIN FUNCIONES ****************************************/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Seteo el servidor acorde a la variable\r",
											"var ambiente = pm.environment.get(\"Ambiente\");\r",
											"\r",
											"\r",
											"\r",
											"var url =\"\";\r",
											"var query1 = \"?tipoDoc=\";\r",
											"var query2 = \"&idDoc=\";\r",
											"var tipoDoc = \"cuit\";\r",
											"var idDoc = \"30585895268\"\r",
											"//Se setea el servidor a utilizar acorde al ambiente\r",
											"\r",
											"switch (ambiente) {\r",
											"    case 'qas':\r",
											"        url= \"SET URL HERE\";\r",
											"        break;\r",
											"    case 'inte':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    case 'desa':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    default:\r",
											"        break;\r",
											"}\r",
											"\r",
											"url = url + query1 + tipoDoc + query2 + idDoc;\r",
											"//console.log(url);\r",
											"pm.environment.set(\"Url\",url);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}",
									"host": [
										"{{Url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clasificacion Cliente Juridica",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************   INICIALIZACION  ************************/\r",
											"//Se setean todas la variables necesarias para registrar el llamado al servicio\r",
											"let utils = eval(environment.utils)();\r",
											"var pruebas = \"\";\r",
											"var response = pm.response.json();\r",
											"var requestJson = request.data;\r",
											"var requestHeaders = pm.request.getHeaders(true,true,false,true);\r",
											"var headerString = utils.myPackage.formatHeaders(requestHeaders);\r",
											"var resquestUrl = request.url;\r",
											"var completeCall = \"URL: \\n\"+resquestUrl+\"\\n\\n\"+\"Headers: \\n\"+headerString;\r",
											"/****************  FIN INICIALIZACION  ************************/\r",
											"\r",
											"\r",
											"//El try se utiliza para poder atrapar cualquier excepcion que surja por casos no contemplados\r",
											"try {\r",
											"        var testName = pm.environment.get(\"TestName\");\r",
											"        const response = pm.response.json();\r",
											"\r",
											"        \r",
											"        switch (testName) {\r",
											"            case 'CPA00080 - Probar que servicio GET ClasificacionCliente con HostId  traiga la clasificación GoodPath [1]':\r",
											"            //El pm.test no es necesario para la automatizacion. Sirve para las ejecuciones manuales, pero no afecta a la automatizacion\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"            case 'Manual':\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"        }\r",
											"} catch (error) {\r",
											"    //console.log(error);\r",
											"    \r",
											"    pm.environment.set(\"HuboError\", \"true\");\r",
											"    var mensaje = error.message;\r",
											"    pm.test(\"Error | \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.equal(\"\");\r",
											"    });\r",
											"    pruebas = pruebas + \"Error inesperado: \" + mensaje;\r",
											"    console.log(pruebas)\r",
											"} finally {\r",
											"    var responseString = utils.myPackage.formatearJson(response);\r",
											"    if (pruebas != \"\") {\r",
											"        utils.myPackage.setearEvidenciaConPruebas(completeCall, responseString, pruebas);\r",
											"    } else {\r",
											"        utils.myPackage.setearEvidencia(completeCall, responseString);\r",
											"    }\r",
											"    \r",
											"    postman.setNextRequest('Actualiza Paso');\r",
											"}\r",
											"/*************************** FUNCIONES ****************************************/\r",
											"\r",
											"//Verifica que el codigo de respuesta del servidor, sea el esperado\r",
											"\r",
											" function verificarEstadoResponse(estado) {\r",
											"    //auto:\r",
											"    setHuboError(pm.response.to.have.status(estado));\r",
											"    setPruebas(\"[OK -Response Status: 200] \", \"[FAIL Response Status: Error en el servidor] \");\r",
											"    //manual:\r",
											"    pm.test(\"Status code : \"+ estado, function () {\r",
											"        pm.response.to.have.status(estado);\r",
											"    });\r",
											"};\r",
											"\r",
											"\r",
											"function verificarSchema(response){\r",
											"    var Ajv = require('ajv'),\r",
											"    ajv = new Ajv({logger: console}),\r",
											"    schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"meta\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"method\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"operation\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"method\",\r",
											"        \"operation\"\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"segmentoId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"sucursalId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"funcionarioId\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"segmentoId\",\r",
											"        \"sucursalId\",\r",
											"        \"funcionarioId\"\r",
											"      ]\r",
											"    },\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"meta\",\r",
											"    \"data\",\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"    //auto:\r",
											"    setHuboError(pm.expect(ajv.validate(schema, response)).to.be.true);\r",
											"    setPruebas(\"[OK Esquema JSON válido] \", \"[FAIL Esquema JSON inválido] \");\r",
											"    //manual:\r",
											"     pm.test('Schema is valid', function () {\r",
											"        pm.expect(ajv.validate(schema, response)).to.be.true;\r",
											"    });   \r",
											"};\r",
											"\r",
											"function setHuboError(testIsTrue){\r",
											"    if(testIsTrue){\r",
											"            pm.environment.set(\"HuboError\", \"false\");\r",
											"        } else {\r",
											"            pm.environment.set(\"HuboError\", \"true\");\r",
											"        }\r",
											"}\r",
											"\r",
											"function setPruebas(messageOk, messageError){\r",
											"    if(pm.environment.get(\"HuboError\")==\"false\"){\r",
											"                pruebas += messageOk;\r",
											"                }else {\r",
											"                pruebas += messageError;\r",
											"                }\r",
											"}\r",
											"\r",
											"/************************* FIN FUNCIONES ****************************************/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Seteo el servidor acorde a la variable\r",
											"var ambiente = pm.environment.get(\"Ambiente\");\r",
											"\r",
											"\r",
											"\r",
											"var url =\"\";\r",
											"var query1 = \"?hostId=\";\r",
											"var idDoc = \"9000050238\"\r",
											"//Se setea el servidor a utilizar acorde al ambiente\r",
											"\r",
											"switch (ambiente) {\r",
											"    case 'qas':\r",
											"        url= \"SET URL HERE\";\r",
											"        break;\r",
											"    case 'inte':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    case 'desa':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    default:\r",
											"        break;\r",
											"}\r",
											"\r",
											"url = url + query1 + idDoc;\r",
											"//console.log(url);\r",
											"pm.environment.set(\"Url\",url);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}",
									"host": [
										"{{Url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sector Contable Persona Juridica",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************   INICIALIZACION  ************************/\r",
											"//Se setean todas la variables necesarias para registrar el llamado al servicio\r",
											"let utils = eval(environment.utils)();\r",
											"var pruebas = \"\";\r",
											"var response = pm.response.json();\r",
											"var requestJson = request.data;\r",
											"var requestHeaders = pm.request.getHeaders(true,true,false,true);\r",
											"var headerString = utils.myPackage.formatHeaders(requestHeaders);\r",
											"var resquestUrl = request.url;\r",
											"var completeCall = \"URL: \\n\"+resquestUrl+\"\\n\\n\"+\"Headers: \\n\"+headerString;\r",
											"/****************  FIN INICIALIZACION  ************************/\r",
											"\r",
											"\r",
											"//El try se utiliza para poder atrapar cualquier excepcion que surja por casos no contemplados\r",
											"try {\r",
											"        var testName = pm.environment.get(\"TestName\");\r",
											"        const response = pm.response.json();\r",
											"\r",
											"        \r",
											"        switch (testName) {\r",
											"            case 'CPA00100 - Probar servicio GET SectorContablePersona con HostId  GoodPath [1]':\r",
											"            //El pm.test no es necesario para la automatizacion. Sirve para las ejecuciones manuales, pero no afecta a la automatizacion\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"            case 'Manual':\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                console.log(pruebas);\r",
											"            break;  \r",
											"        }\r",
											"} catch (error) {\r",
											"    //console.log(error);\r",
											"    \r",
											"    pm.environment.set(\"HuboError\", \"true\");\r",
											"    var mensaje = error.message;\r",
											"    pm.test(\"Error | \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.equal(\"\");\r",
											"    });\r",
											"    pruebas = pruebas + \"Error inesperado: \" + mensaje;\r",
											"    console.log(pruebas)\r",
											"} finally {\r",
											"    var responseString = utils.myPackage.formatearJson(response);\r",
											"    if (pruebas != \"\") {\r",
											"        utils.myPackage.setearEvidenciaConPruebas(completeCall, responseString, pruebas);\r",
											"    } else {\r",
											"        utils.myPackage.setearEvidencia(completeCall, responseString);\r",
											"    }\r",
											"    \r",
											"    postman.setNextRequest('Actualiza Paso');\r",
											"}\r",
											"/*************************** FUNCIONES ****************************************/\r",
											"\r",
											"//Verifica que el codigo de respuesta del servidor, sea el esperado\r",
											"\r",
											" function verificarEstadoResponse(estado) {\r",
											"    //auto:\r",
											"    setHuboError(pm.response.to.have.status(estado));\r",
											"    setPruebas(\"[OK -Response Status: 200] \", \"[FAIL Response Status: Error en el servidor] \");\r",
											"    //manual:\r",
											"    pm.test(\"Status code : \"+ estado, function () {\r",
											"        pm.response.to.have.status(estado);\r",
											"    });\r",
											"};\r",
											"\r",
											"\r",
											"function verificarSchema(response){\r",
											"    var Ajv = require('ajv'),\r",
											"    ajv = new Ajv({logger: console}),\r",
											"    schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"meta\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"method\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"operation\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"method\",\r",
											"        \"operation\"\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"meta\",\r",
											"    \"data\",\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"    //auto:\r",
											"    setHuboError(pm.expect(ajv.validate(schema, response)).to.be.true);\r",
											"    setPruebas(\"[OK Esquema JSON válido] \", \"[FAIL Esquema JSON inválido] \");\r",
											"    //manual:\r",
											"     pm.test('Schema is valid', function () {\r",
											"        pm.expect(ajv.validate(schema, response)).to.be.true;\r",
											"    });   \r",
											"};\r",
											"\r",
											"function setHuboError(testIsTrue){\r",
											"    if(testIsTrue){\r",
											"            pm.environment.set(\"HuboError\", \"false\");\r",
											"        } else {\r",
											"            pm.environment.set(\"HuboError\", \"true\");\r",
											"        }\r",
											"}\r",
											"\r",
											"function setPruebas(messageOk, messageError){\r",
											"    if(pm.environment.get(\"HuboError\")==\"false\"){\r",
											"                pruebas += messageOk;\r",
											"                }else {\r",
											"                pruebas += messageError;\r",
											"                }\r",
											"}\r",
											"\r",
											"/************************* FIN FUNCIONES ****************************************/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Seteo el servidor acorde a la variable\r",
											"var ambiente = pm.environment.get(\"Ambiente\");\r",
											"\r",
											"\r",
											"\r",
											"var url =\"\";\r",
											"var query1 = \"?hostId=\";\r",
											"var idDoc = \"4174272\"\r",
											"//Se setea el servidor a utilizar acorde al ambiente\r",
											"\r",
											"switch (ambiente) {\r",
											"    case 'qas':\r",
											"        url= \"SET URL HERE\";\r",
											"        break;\r",
											"    case 'inte':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    case 'desa':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    default:\r",
											"        break;\r",
											"}\r",
											"\r",
											"url = url + query1 + idDoc;\r",
											"//console.log(url);\r",
											"pm.environment.set(\"Url\",url);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}",
									"host": [
										"{{Url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consulta Posicion Juridica",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Seteo el servidor acorde a la variable\r",
											"var ambiente = pm.environment.get(\"Ambiente\");\r",
											"\r",
											"\r",
											"\r",
											"var url =\"\";\r",
											"\r",
											"//Se setea el servidor a utilizar acorde al ambiente\r",
											"\r",
											"switch (ambiente) {\r",
											"    case 'qas':\r",
											"        url= \"SET URL HERE\";\r",
											"        break;\r",
											"    case 'inte':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    case 'desa':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    default:\r",
											"        break;\r",
											"}\r",
											"\r",
											"url = url;\r",
											"//console.log(url);\r",
											"pm.environment.set(\"Url\",url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************   INICIALIZACION  ************************/\r",
											"//Se setean todas la variables necesarias para registrar el llamado al servicio\r",
											"let utils = eval(environment.utils)();\r",
											"var pruebas = \"\";\r",
											"var response = pm.response.json();\r",
											"var requestJson = request.data;\r",
											"var requestHeaders = pm.request.getHeaders(true,true,false,true);\r",
											"var headerString = utils.myPackage.formatHeaders(requestHeaders);\r",
											"var resquestUrl = request.url;\r",
											"var completeCall = \"URL: \\n\"+resquestUrl+\"\\n\\n\"+\"Headers: \\n\"+headerString;\r",
											"/****************  FIN INICIALIZACION  ************************/\r",
											"\r",
											"\r",
											"//El try se utiliza para poder atrapar cualquier excepcion que surja por casos no contemplados\r",
											"try {\r",
											"        var testName = pm.environment.get(\"TestName\");\r",
											"        const response = pm.response.json();\r",
											"\r",
											"        \r",
											"        switch (testName) {\r",
											"            case 'CPA00110 - Probar servicio POST ConsultaPosicion Juridica GoodPath [1]':\r",
											"            //El pm.test no es necesario para la automatizacion. Sirve para las ejecuciones manuales, pero no afecta a la automatizacion\r",
											"                verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"            case 'Manual':\r",
											"            verificarEstadoResponse(200);\r",
											"                verificarSchema(response);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);    \r",
											"            break;\r",
											"        }\r",
											"} catch (error) {\r",
											"    //console.log(error);\r",
											"    \r",
											"    pm.environment.set(\"HuboError\", \"true\");\r",
											"    var mensaje = error.message;\r",
											"    pm.test(\"Error | \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.equal(\"\");\r",
											"    });\r",
											"    pruebas = pruebas + \"Error inesperado: \" + mensaje;\r",
											"    console.log(pruebas)\r",
											"} finally {\r",
											"    var responseString = utils.myPackage.formatearJson(response);\r",
											"    if (pruebas != \"\") {\r",
											"        utils.myPackage.setearEvidenciaConPruebas(completeCall, responseString, pruebas);\r",
											"    } else {\r",
											"        utils.myPackage.setearEvidencia(completeCall, responseString);\r",
											"    }\r",
											"    \r",
											"    postman.setNextRequest('Actualiza Paso');\r",
											"}\r",
											"/*************************** FUNCIONES ****************************************/\r",
											"\r",
											"//Verifica que el codigo de respuesta del servidor, sea el esperado\r",
											"\r",
											" function verificarEstadoResponse(estado) {\r",
											"    //auto:\r",
											"    setHuboError(pm.response.to.have.status(estado));\r",
											"    setPruebas(\"[OK -Response Status: 200] \", \"[FAIL Response Status: Error en el servidor] \");\r",
											"    //manual:\r",
											"    pm.test(\"Status code : \"+ estado, function () {\r",
											"        pm.response.to.have.status(estado);\r",
											"    });\r",
											"};\r",
											"\r",
											"\r",
											"function verificarSchema(response){\r",
											"    var Ajv = require('ajv'),\r",
											"    ajv = new Ajv({logger: console}),\r",
											"    schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"meta\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"method\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"operation\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"method\",\r",
											"        \"operation\"\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"tipoConsultaPosicion\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"cantidadProductos\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"empleado\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"posicionPropia\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"productos\": {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"cuentas\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"codigo\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"descripcion\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"numero\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"moneda\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"saldo\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"sucursalAdministradora\": {\r",
											"                      \"type\": \"null\"\r",
											"                    },\r",
											"                    \"codigoSubsistema\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"tipoConsultaPosicion\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"cantidadProductos\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"empleado\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"posicionPropia\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"productos\": {\r",
											"                      \"type\": \"null\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"codigo\",\r",
											"                    \"descripcion\",\r",
											"                    \"numero\",\r",
											"                    \"moneda\",\r",
											"                    \"saldo\",\r",
											"                    \"sucursalAdministradora\",\r",
											"                    \"codigoSubsistema\",\r",
											"                    \"tipoConsultaPosicion\",\r",
											"                    \"cantidadProductos\",\r",
											"                    \"empleado\",\r",
											"                    \"posicionPropia\",\r",
											"                    \"productos\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"tipoConsultaPosicion\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"cantidadProductos\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"empleado\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"posicionPropia\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"productos\": {\r",
											"              \"type\": \"null\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"cuentas\",\r",
											"            \"tipoConsultaPosicion\",\r",
											"            \"cantidadProductos\",\r",
											"            \"empleado\",\r",
											"            \"posicionPropia\",\r",
											"            \"productos\"\r",
											"          ]\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"tipoConsultaPosicion\",\r",
											"        \"cantidadProductos\",\r",
											"        \"empleado\",\r",
											"        \"posicionPropia\",\r",
											"        \"productos\"\r",
											"      ]\r",
											"    },\r",
											"    \"errors\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"meta\",\r",
											"    \"data\",\r",
											"    \"errors\"\r",
											"  ]\r",
											"}\r",
											"    //auto:\r",
											"    setHuboError(pm.expect(ajv.validate(schema, response)).to.be.true);\r",
											"    setPruebas(\"[OK Esquema JSON válido] \", \"[FAIL Esquema JSON inválido] \");\r",
											"    //manual:\r",
											"     pm.test('Schema is valid', function () {\r",
											"        pm.expect(ajv.validate(schema, response)).to.be.true;\r",
											"    });   \r",
											"};\r",
											"\r",
											"function validarDatos(response){\r",
											"    //auto:\r",
											"    var codigo = response.data.productos.cuentas[0].codigo;\r",
											"    var descripcion = response.data.productos.cuentas[0].descripcion;\r",
											"    var numero = response.data.productos.cuentas[0].numero;\r",
											"    var moneda = response.data.productos.cuentas[0].moneda;\r",
											"\r",
											"    setHuboError(pm.expect(codigo).to.eql(1));\r",
											"    setPruebas(\"[OK - código: \" + codigo + \"]\", \"[FAIL - código erróneo]\")\r",
											"    setHuboError(pm.expect(descripcion).to.eql(\"Caja de Ahorro\"));\r",
											"    setPruebas(\"[OK - descripcion: \" + descripcion + \"]\", \"[FAIL - descripcion errónea]\")\r",
											"    setHuboError(pm.expect(numero).to.eql(\"975006713275\"));\r",
											"    setPruebas(\"[OK - número de cuenta: \" + numero + \"]\", \"[FAIL - número erróneo]\")\r",
											"    setHuboError(pm.expect(moneda).to.eql(2));\r",
											"    setPruebas(\"[OK - moneda: \" + moneda + \"]\", \"[FAIL - moneda errónea]\")\r",
											"\r",
											"    //manual:\r",
											"    pm.test(\"Codigo: \" + codigo, function () {\r",
											"        pm.expect(codigo).to.eql(1);\r",
											"    });\r",
											"    pm.test(\"Descripcion: \" + descripcion, function () {\r",
											"        pm.expect(descripcion).to.eql(\"Caja de Ahorro\");\r",
											"    });\r",
											"    pm.test(\"Número: \" + numero, function () {\r",
											"        pm.expect(numero).to.eql(\"975006713275\");\r",
											"    });\r",
											"     pm.test(\"Moneda: \" + moneda, function () {\r",
											"        pm.expect(moneda).to.eql(2);\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"function setHuboError(testIsTrue){\r",
											"    if(testIsTrue){\r",
											"            pm.environment.set(\"HuboError\", \"false\");\r",
											"        } else {\r",
											"            pm.environment.set(\"HuboError\", \"true\");\r",
											"        }\r",
											"}\r",
											"\r",
											"function setPruebas(messageOk, messageError){\r",
											"    if(pm.environment.get(\"HuboError\")==\"false\"){\r",
											"                pruebas += messageOk;\r",
											"                }else {\r",
											"                pruebas += messageError;\r",
											"                }\r",
											"}\r",
											"\r",
											"/************************* FIN FUNCIONES ****************************************/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"hostId\": \"9000050238\",\r\n  \"productosSolicitados\": [\r\n    {\r\n      \"codigo\": \"CA\",\r\n      \"informacionAdicional\": false\r\n    },\r\n    {\r\n      \"codigo\": \"CC\",\r\n      \"informacionAdicional\": false\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}",
									"host": [
										"{{Url}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negativo",
					"item": [
						{
							"name": "Cliente By CUIT Numeros y letras (negativo)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Seteo el servidor acorde a la variable\r",
											"var ambiente = pm.environment.get(\"Ambiente\");\r",
											"\r",
											"\r",
											"\r",
											"var url =\"\";\r",
											"var query1 = \"?tipoDoc=\";\r",
											"var query2 = \"&idDoc=\";\r",
											"var tipoDoc = \"cuit\";\r",
											"var idDoc = \"dgetdg675\"\r",
											"//Se setea el servidor a utilizar acorde al ambiente\r",
											"\r",
											"switch (ambiente) {\r",
											"    case 'qas':\r",
											"        url= \"SET URL HERE\";\r",
											"        break;\r",
											"    case 'inte':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    case 'desa':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    default:\r",
											"        break;\r",
											"}\r",
											"\r",
											"url = url + query1 + tipoDoc + query2 + idDoc;\r",
											"//console.log(url);\r",
											"pm.environment.set(\"Url\",url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************   INICIALIZACION  ************************/\r",
											"//Se setean todas la variables necesarias para registrar el llamado al servicio\r",
											"let utils = eval(environment.utils)();\r",
											"var pruebas = \"\";\r",
											"var response = pm.response.json();\r",
											"var requestJson = request.data;\r",
											"var requestHeaders = pm.request.getHeaders(true,true,false,true);\r",
											"var headerString = utils.myPackage.formatHeaders(requestHeaders);\r",
											"var resquestUrl = request.url;\r",
											"var completeCall = \"URL: \\n\"+resquestUrl+\"\\n\\n\"+\"Headers: \\n\"+headerString;\r",
											"/****************  FIN INICIALIZACION  ************************/\r",
											"\r",
											"\r",
											"//El try se utiliza para poder atrapar cualquier excepcion que surja por casos no contemplados\r",
											"try {\r",
											"        var testName = pm.environment.get(\"TestName\");\r",
											"        const response = pm.response.json();\r",
											"\r",
											"        \r",
											"        switch (testName) {\r",
											"            case 'CPA00120 - Probar que al ingresar letras en lugar de números el servicio devuelva Bad Request (BadPath) [1]':\r",
											"            //El pm.test no es necesario para la automatizacion. Sirve para las ejecuciones manuales, pero no afecta a la automatizacion\r",
											"                verificarEstadoResponse(400);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"            case 'Manual':\r",
											"            verificarEstadoResponse(400);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"        }\r",
											"} catch (error) {\r",
											"    //console.log(error);\r",
											"    \r",
											"    pm.environment.set(\"HuboError\", \"true\");\r",
											"    var mensaje = error.message;\r",
											"    pm.test(\"Error | \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.equal(\"\");\r",
											"    });\r",
											"    pruebas = pruebas + \"Error inesperado: \" + mensaje;\r",
											"    console.log(pruebas)\r",
											"} finally {\r",
											"    var responseString = utils.myPackage.formatearJson(response);\r",
											"    if (pruebas != \"\") {\r",
											"        utils.myPackage.setearEvidenciaConPruebas(completeCall, responseString, pruebas);\r",
											"    } else {\r",
											"        utils.myPackage.setearEvidencia(completeCall, responseString);\r",
											"    }\r",
											"    \r",
											"    postman.setNextRequest('Actualiza Paso');\r",
											"}\r",
											"/*************************** FUNCIONES ****************************************/\r",
											"\r",
											"//Verifica que el codigo de respuesta del servidor, sea el esperado\r",
											"\r",
											" function verificarEstadoResponse(estado) {\r",
											"    //auto:\r",
											"    setHuboError(pm.response.to.have.status(estado));\r",
											"    setPruebas(\"[OK -Response Status: 400] \", \"[FAIL Response Status: Error en el servidor] \");\r",
											"    //manual:\r",
											"    pm.test(\"Status code : \"+ estado, function () {\r",
											"        pm.response.to.have.status(estado);\r",
											"    });\r",
											"};\r",
											"\r",
											"function validarDatos(response){\r",
											"    //auto:\r",
											"    var mensaje = response.data.message;\r",
											"    \r",
											"    setHuboError(pm.expect(mensaje).to.eql(\"El cuit ingresado no se puede parsear del tipo string al tipo ulong.\"));\r",
											"    setPruebas(\"[OK - Mensaje: \" + mensaje + \"]\", \"[FAIL - mensaje erróneo]\")\r",
											"    \r",
											"    //manual:\r",
											"    pm.test(\"mensaje: \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.eql(\"El cuit ingresado no se puede parsear del tipo string al tipo ulong.\");\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"function setHuboError(testIsTrue){\r",
											"    if(testIsTrue){\r",
											"            pm.environment.set(\"HuboError\", \"false\");\r",
											"        } else {\r",
											"            pm.environment.set(\"HuboError\", \"true\");\r",
											"        }\r",
											"}\r",
											"\r",
											"function setPruebas(messageOk, messageError){\r",
											"    if(pm.environment.get(\"HuboError\")==\"false\"){\r",
											"                pruebas += messageOk;\r",
											"                }else {\r",
											"                pruebas += messageError;\r",
											"                }\r",
											"}\r",
											"\r",
											"/************************* FIN FUNCIONES ****************************************/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}",
									"host": [
										"{{Url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Datos Basicos Persona Fisica Juridica",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Seteo el servidor acorde a la variable\r",
											"var ambiente = pm.environment.get(\"Ambiente\");\r",
											"\r",
											"var url =\"\";\r",
											"var query1 = \"?hostId=\";\r",
											"var idDoc = \"9000050238\"\r",
											"//Se setea el servidor a utilizar acorde al ambiente\r",
											"\r",
											"switch (ambiente) {\r",
											"    case 'qas':\r",
											"        url= \"SET URL HERE\";\r",
											"        break;\r",
											"    case 'inte':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    case 'desa':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    default:\r",
											"        break;\r",
											"}\r",
											"\r",
											"url = url + query1 + idDoc;\r",
											"//console.log(url);\r",
											"pm.environment.set(\"Url\",url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************   INICIALIZACION  ************************/\r",
											"//Se setean todas la variables necesarias para registrar el llamado al servicio\r",
											"let utils = eval(environment.utils)();\r",
											"var pruebas = \"\";\r",
											"var response = pm.response.json();\r",
											"var requestJson = request.data;\r",
											"var requestHeaders = pm.request.getHeaders(true,true,false,true);\r",
											"var headerString = utils.myPackage.formatHeaders(requestHeaders);\r",
											"var resquestUrl = request.url;\r",
											"var completeCall = \"URL: \\n\"+resquestUrl+\"\\n\\n\"+\"Headers: \\n\"+headerString;\r",
											"/****************  FIN INICIALIZACION  ************************/\r",
											"\r",
											"\r",
											"//El try se utiliza para poder atrapar cualquier excepcion que surja por casos no contemplados\r",
											"try {\r",
											"        var testName = pm.environment.get(\"TestName\");\r",
											"        const response = pm.response.json();\r",
											"\r",
											"        \r",
											"        switch (testName) {\r",
											"            case 'CPA00150 - Probar que servicio GET DatosBasicosPersona fisica con HostID juridica devuelva Bad request BadPath [1]':\r",
											"            //El pm.test no es necesario para la automatizacion. Sirve para las ejecuciones manuales, pero no afecta a la automatizacion\r",
											"                verificarEstadoResponse(400);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"            case 'Manual':\r",
											"            verificarEstadoResponse(400);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"        }\r",
											"} catch (error) {\r",
											"    //console.log(error);\r",
											"    \r",
											"    pm.environment.set(\"HuboError\", \"true\");\r",
											"    var mensaje = error.message;\r",
											"    pm.test(\"Error | \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.equal(\"\");\r",
											"    });\r",
											"    pruebas = pruebas + \"Error inesperado: \" + mensaje;\r",
											"    console.log(pruebas)\r",
											"} finally {\r",
											"    var responseString = utils.myPackage.formatearJson(response);\r",
											"    if (pruebas != \"\") {\r",
											"        utils.myPackage.setearEvidenciaConPruebas(completeCall, responseString, pruebas);\r",
											"    } else {\r",
											"        utils.myPackage.setearEvidencia(completeCall, responseString);\r",
											"    }\r",
											"    \r",
											"    postman.setNextRequest('Actualiza Paso');\r",
											"}\r",
											"/*************************** FUNCIONES ****************************************/\r",
											"\r",
											"//Verifica que el codigo de respuesta del servidor, sea el esperado\r",
											"\r",
											" function verificarEstadoResponse(estado) {\r",
											"    //auto:\r",
											"    setHuboError(pm.response.to.have.status(estado));\r",
											"    setPruebas(\"[OK -Response Status: 400] \", \"[FAIL Response Status: Error en el servidor] \");\r",
											"    //manual:\r",
											"    pm.test(\"Status code : \"+ estado, function () {\r",
											"        pm.response.to.have.status(estado);\r",
											"    });\r",
											"};\r",
											"\r",
											"function validarDatos(response){\r",
											"    //auto:\r",
											"    var mensaje = response.data.Message;\r",
											"    \r",
											"    setHuboError(pm.expect(mensaje).to.eql(\"el servicio no contiene datos basicos\"));\r",
											"    setPruebas(\"[OK - Mensaje: \" + mensaje + \"]\", \"[FAIL - mensaje erróneo]\")\r",
											"    \r",
											"    //manual:\r",
											"    pm.test(\"mensaje: \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.eql(\"el servicio no contiene datos basicos\");\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"function setHuboError(testIsTrue){\r",
											"    if(testIsTrue){\r",
											"            pm.environment.set(\"HuboError\", \"false\");\r",
											"        } else {\r",
											"            pm.environment.set(\"HuboError\", \"true\");\r",
											"        }\r",
											"}\r",
											"\r",
											"function setPruebas(messageOk, messageError){\r",
											"    if(pm.environment.get(\"HuboError\")==\"false\"){\r",
											"                pruebas += messageOk;\r",
											"                }else {\r",
											"                pruebas += messageError;\r",
											"                }\r",
											"}\r",
											"\r",
											"/************************* FIN FUNCIONES ****************************************/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}",
									"host": [
										"{{Url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cliente By CUIL juridica (negativo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************   INICIALIZACION  ************************/\r",
											"//Se setean todas la variables necesarias para registrar el llamado al servicio\r",
											"let utils = eval(environment.utils)();\r",
											"var pruebas = \"\";\r",
											"var response = pm.response.json();\r",
											"var requestJson = request.data;\r",
											"var requestHeaders = pm.request.getHeaders(true,true,false,true);\r",
											"var headerString = utils.myPackage.formatHeaders(requestHeaders);\r",
											"var resquestUrl = request.url;\r",
											"var completeCall = \"URL: \\n\"+resquestUrl+\"\\n\\n\"+\"Headers: \\n\"+headerString;\r",
											"/****************  FIN INICIALIZACION  ************************/\r",
											"\r",
											"\r",
											"//El try se utiliza para poder atrapar cualquier excepcion que surja por casos no contemplados\r",
											"try {\r",
											"        var testName = pm.environment.get(\"TestName\");\r",
											"        const response = pm.response.json();\r",
											"        \r",
											"        switch (testName) {\r",
											"            case 'CPA00130 - Probar que al ingresar tipo documento CUIL para una persona juridica devuelva Bad Request (BadPath) [1]':\r",
											"            //El pm.test no es necesario para la automatizacion. Sirve para las ejecuciones manuales, pero no afecta a la automatizacion\r",
											"                verificarEstadoResponse(400);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"            case 'Manual':\r",
											"                verificarEstadoResponse(400);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"        }\r",
											"} catch (error) {\r",
											"    //console.log(error);\r",
											"    \r",
											"    pm.environment.set(\"HuboError\", \"true\");\r",
											"    var mensaje = error.message;\r",
											"    pm.test(\"Error | \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.equal(\"\");\r",
											"    });\r",
											"    pruebas = pruebas + \"Error inesperado: \" + mensaje;\r",
											"    console.log(pruebas)\r",
											"} finally {\r",
											"    var responseString = utils.myPackage.formatearJson(response);\r",
											"    if (pruebas != \"\") {\r",
											"        utils.myPackage.setearEvidenciaConPruebas(completeCall, responseString, pruebas);\r",
											"    } else {\r",
											"        utils.myPackage.setearEvidencia(completeCall, responseString);\r",
											"    }\r",
											"    \r",
											"    postman.setNextRequest('Actualiza Paso');\r",
											"}\r",
											"/*************************** FUNCIONES ****************************************/\r",
											"\r",
											"//Verifica que el codigo de respuesta del servidor, sea el esperado\r",
											"\r",
											" function verificarEstadoResponse(estado) {\r",
											"    //auto:\r",
											"    setHuboError(pm.response.to.have.status(estado));\r",
											"    setPruebas(\"[OK -Response Status: 400]\\n\", \"[FAIL Response Status: Error en el servidor]\\n\");\r",
											"    //manual:\r",
											"    pm.test(\"Status code : \"+ estado, function () {\r",
											"        pm.response.to.have.status(estado);\r",
											"    });\r",
											"};\r",
											"\r",
											"function validarDatos(response){\r",
											"    \r",
											"    var mensaje = response.data.Message;\r",
											"\r",
											"    //auto:\r",
											"    setHuboError(pm.expect(mensaje).to.eql(\"Value cannot be null.\"));\r",
											"    setPruebas(\"[OK - Mensaje: \" + mensaje + \"]\\n\", \"[FAIL - mensaje erróneo]\\n\");\r",
											"\r",
											"    //manual:\r",
											"    pm.test(\"mensaje: \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.eql(\"Value cannot be null.\");\r",
											"    });   \r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"function setHuboError(testIsTrue){\r",
											"    if(testIsTrue){\r",
											"            pm.environment.set(\"HuboError\", \"false\");\r",
											"        } else {\r",
											"            pm.environment.set(\"HuboError\", \"true\");\r",
											"        }\r",
											"}\r",
											"\r",
											"function setPruebas(messageOk, messageError){\r",
											"    if(pm.environment.get(\"HuboError\")==\"false\"){\r",
											"                pruebas += messageOk;\r",
											"                }else {\r",
											"                pruebas += messageError;\r",
											"                }\r",
											"}\r",
											"\r",
											"/************************* FIN FUNCIONES ****************************************/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Seteo el servidor acorde a la variable\r",
											"var ambiente = pm.environment.get(\"Ambiente\");\r",
											"\r",
											"\r",
											"\r",
											"var url =\"\";\r",
											"var query1 = \"?tipoDoc=\";\r",
											"var query2 = \"&idDoc=\";\r",
											"var tipoDoc = \"cuil\";\r",
											"var idDoc = \"30585895268\"\r",
											"//Se setea el servidor a utilizar acorde al ambiente\r",
											"\r",
											"switch (ambiente) {\r",
											"    case 'qas':\r",
											"        url= \"SET URL HERE\";\r",
											"        break;\r",
											"    case 'inte':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    case 'desa':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    default:\r",
											"        break;\r",
											"}\r",
											"\r",
											"url = url + query1 + tipoDoc + query2 + idDoc;\r",
											"console.log(url);\r",
											"pm.environment.set(\"Url\",url);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}",
									"host": [
										"{{Url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cliente By DNI",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Seteo el servidor acorde a la variable\r",
											"var ambiente = pm.environment.get(\"Ambiente\");\r",
											"\r",
											"\r",
											"\r",
											"var url =\"\";\r",
											"var query1 = \"?tipoDoc=\";\r",
											"var query2 = \"&idDoc=\";\r",
											"var tipoDoc = \"dni\";\r",
											"var idDoc = \"11735245\"\r",
											"//Se setea el servidor a utilizar acorde al ambiente\r",
											"\r",
											"switch (ambiente) {\r",
											"    case 'qas':\r",
											"        url= \"SET URL HERE\";\r",
											"        break;\r",
											"    case 'inte':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    case 'desa':\r",
											"        url= \"\";\r",
											"        break;\r",
											"    default:\r",
											"        break;\r",
											"}\r",
											"\r",
											"url = url + query1 + tipoDoc + query2 + idDoc;\r",
											"//console.log(url);\r",
											"pm.environment.set(\"Url\",url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************   INICIALIZACION  ************************/\r",
											"//Se setean todas la variables necesarias para registrar el llamado al servicio\r",
											"let utils = eval(environment.utils)();\r",
											"var pruebas = \"\";\r",
											"var response = pm.response.json();\r",
											"var requestJson = request.data;\r",
											"var requestHeaders = pm.request.getHeaders(true,true,false,true);\r",
											"var headerString = utils.myPackage.formatHeaders(requestHeaders);\r",
											"var resquestUrl = request.url;\r",
											"var completeCall = \"URL: \\n\"+resquestUrl+\"\\n\\n\"+\"Headers: \\n\"+headerString;\r",
											"/****************  FIN INICIALIZACION  ************************/\r",
											"\r",
											"\r",
											"//El try se utiliza para poder atrapar cualquier excepcion que surja por casos no contemplados\r",
											"try {\r",
											"        var testName = pm.environment.get(\"TestName\");\r",
											"        const response = pm.response.json();\r",
											"\r",
											"        \r",
											"        switch (testName) {\r",
											"            case 'CPA00140 - Probar que al ingresar un tipo de documento inválido el servicio devuelva Bad Request (BadPath) [1]':\r",
											"            //El pm.test no es necesario para la automatizacion. Sirve para las ejecuciones manuales, pero no afecta a la automatizacion\r",
											"                verificarEstadoResponse(400);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"             case 'Manual':\r",
											"            verificarEstadoResponse(400);\r",
											"                validarDatos(response);\r",
											"                console.log(pruebas);\r",
											"            break;\r",
											"        }\r",
											"} catch (error) {\r",
											"    //console.log(error);\r",
											"    \r",
											"    pm.environment.set(\"HuboError\", \"true\");\r",
											"    var mensaje = error.message;\r",
											"    pm.test(\"Error | \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.equal(\"\");\r",
											"    });\r",
											"    pruebas = pruebas + \"Error inesperado: \" + mensaje;\r",
											"    console.log(pruebas)\r",
											"} finally {\r",
											"    var responseString = utils.myPackage.formatearJson(response);\r",
											"    if (pruebas != \"\") {\r",
											"        utils.myPackage.setearEvidenciaConPruebas(completeCall, responseString, pruebas);\r",
											"    } else {\r",
											"        utils.myPackage.setearEvidencia(completeCall, responseString);\r",
											"    }\r",
											"    \r",
											"    postman.setNextRequest('Actualiza Paso');\r",
											"}\r",
											"/*************************** FUNCIONES ****************************************/\r",
											"\r",
											"//Verifica que el codigo de respuesta del servidor, sea el esperado\r",
											"\r",
											" function verificarEstadoResponse(estado) {\r",
											"    //auto:\r",
											"    setHuboError(pm.response.to.have.status(estado));\r",
											"    setPruebas(\"[OK -Response Status: 400]\\n\", \"[FAIL Response Status: Error en el servidor]\\n\");\r",
											"    //manual:\r",
											"    pm.test(\"Status code : \"+ estado, function () {\r",
											"        pm.response.to.have.status(estado);\r",
											"    });\r",
											"};\r",
											"\r",
											"function validarDatos(response){\r",
											"    \r",
											"    var mensaje = response.errors[0].message;\r",
											"    var descripcion = response.errors[0].description;\r",
											"\r",
											"    //auto:\r",
											"    setHuboError(pm.expect(mensaje).to.eql(\"One or more validation errors occurred.\"));\r",
											"    setPruebas(\"[OK - Mensaje: \" + mensaje + \"]\\n\", \"[FAIL - mensaje erróneo]\\n\");\r",
											"\r",
											"    setHuboError(pm.expect(descripcion).to.eql(\"{\\n  \\\"tipoDoc\\\": [\\n    \\\"The value 'dni' is not valid for tipoDoc.\\\"\\n  ]\\n}\"));\r",
											"    setPruebas(\"[OK - Descripción: \" + descripcion + \"]\\n\", \"[FAIL - Descripción errónea]\\n\");\r",
											"    \r",
											"    //manual:\r",
											"    pm.test(\"mensaje: \" + mensaje, function () {\r",
											"        pm.expect(mensaje).to.eql(\"One or more validation errors occurred.\");\r",
											"    });   \r",
											"    pm.test(\"descripcion: \" + descripcion, function () {\r",
											"        pm.expect(descripcion).to.eql(\"{\\n  \\\"tipoDoc\\\": [\\n    \\\"The value 'dni' is not valid for tipoDoc.\\\"\\n  ]\\n}\");\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"function setHuboError(testIsTrue){\r",
											"    if(testIsTrue){\r",
											"            pm.environment.set(\"HuboError\", \"false\");\r",
											"        } else {\r",
											"            pm.environment.set(\"HuboError\", \"true\");\r",
											"        }\r",
											"}\r",
											"\r",
											"function setPruebas(messageOk, messageError){\r",
											"    if(pm.environment.get(\"HuboError\")==\"false\"){\r",
											"                pruebas += messageOk;\r",
											"                }else {\r",
											"                pruebas += messageError;\r",
											"                }\r",
											"}\r",
											"\r",
											"/************************* FIN FUNCIONES ****************************************/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Url}}",
									"host": [
										"{{Url}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"postman.setEnvironmentVariable(\"utils\", () => {",
					"    var setearSiguienteRequest = () => {",
					"        var error = pm.environment.get(\"HuboError\");",
					"        var pasosTotales = pm.environment.get(\"PasosTotales\");",
					"        if (error == \"false\") {",
					"            var numeroPasoActual = pm.environment.get(\"PasoActualNumero\");",
					"            if (numeroPasoActual < pasosTotales) {",
					"                var arrayPasos = pm.environment.get(\"Pasos\");",
					"                var nombrePasoSiguiente = arrayPasos[numeroPasoActual + 1][0];",
					"                pm.environment.set(\"PasoActualNumero\", numeroPasoActual + 1);",
					"                postman.setNextRequest(nombrePasoSiguiente);",
					"            } else {",
					"                postman.setNextRequest('Update test Run');",
					"            }",
					"        } else {",
					"            postman.setNextRequest('Update test Run');",
					"        }",
					"",
					"    };",
					"    var setearPrimerRequest = () => {",
					"        var arrayPasos = pm.environment.get(\"Pasos\");",
					"        var nombrePasoSiguiente = arrayPasos[0][0];",
					"        postman.setNextRequest(nombrePasoSiguiente);",
					"        pm.environment.set(\"PasoActualNumero\", 0);",
					"        var lala = obtenerNombreRequest(nombrePasoSiguiente);",
					"    };",
					"    var obtenerNombreRequest = (entrada) => {",
					"        var nombreEntrada = entrada;",
					"    };",
					"",
					"",
					"    var setearEvidencia = (request, response) => {",
					"        var requestIn = request;",
					"        var responseIn = response;",
					"        var pasoActual = pm.environment.get(\"PasoActualNumero\");",
					"        var pasoActualNombre = pm.environment.get(\"PasoActualNombre\");",
					"        var evidencia = \"Se ejecuta el servicio \" + pasoActualNombre + \" con el request: \\n \\n\" + requestIn + \"\\n  \\n Y se obtuvo el response: \\n \\n\" + responseIn;",
					"        var arrayPasos = pm.environment.get(\"Pasos\");",
					"        arrayPasos[pasoActual][3] = evidencia;",
					"        pm.environment.set(\"Pasos\", arrayPasos);",
					"        pm.environment.set(\"ALMEvidencia\", evidencia);",
					"",
					"    };",
					"",
					"    var setearEvidenciaConPruebas = (request, response, pruebas) => {",
					"        var requestIn = request;",
					"        var responseIn = response;",
					"        var pruebasIn = pruebas;",
					"        var pasoActual = pm.environment.get(\"PasoActualNumero\");",
					"        var pasoActualNombre = pm.environment.get(\"PasoActualNombre\");",
					"        var evidencia = \"Pruebas realizadas:\\n\" + pruebasIn + \"\\n \\n\" + \"Se ejecuta el servicio \" + pasoActualNombre + \" con el request: \\n \\n\" + requestIn + \"\\n  \\n Y se obtuvo el response: \\n \\n\" + responseIn;",
					"        var arrayPasos = pm.environment.get(\"Pasos\");",
					"        arrayPasos[pasoActual][3] = evidencia;",
					"        pm.environment.set(\"Pasos\", arrayPasos);",
					"        pm.environment.set(\"ALMEvidencia\", evidencia);",
					"",
					"    };",
					"",
					"    var setearAmbienteDesdeElInput = () => {",
					"        if (typeof pm.iterationData.toObject() === 'undefined') {",
					"            //no hace nada",
					"        } else {",
					"            var inputDataValue = \"\";",
					"            var inputData = pm.iterationData.toObject();",
					"            Object.keys(inputData).forEach(element => {",
					"                inputDataValue = pm.iterationData.get(element);",
					"                pm.environment.set(element, inputDataValue);",
					"            });",
					"        }",
					"    };",
					"",
					"    var formatearJson = (input) => {",
					"        return JSON.stringify(input, null, 4);",
					"    };",
					"",
					"    var formatearBodyRequest = (input) => {",
					"        return input.replace(\"\\n\",'\\n');",
					"    };",
					"",
					"    //Se formatean los headers como string para loguearse",
					"    function formatHeaders(requestHeaders) {",
					"        var headers = \"\";",
					"        Object.keys(requestHeaders).forEach(element => {",
					"            headers = headers+element+\" : \"+requestHeaders[element]+\"\\n\";",
					"        });",
					"        return headers;",
					"    }",
					"",
					"    /*-------------------------------------------*/",
					"",
					"    return {",
					"        myPackage: {",
					"            setearSiguienteRequest,",
					"            setearPrimerRequest,",
					"            setearEvidencia,",
					"            setearEvidenciaConPruebas,",
					"            setearAmbienteDesdeElInput,",
					"            formatearJson,",
					"            formatearBodyRequest,",
					"            formatHeaders",
					"        }",
					"    };",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}